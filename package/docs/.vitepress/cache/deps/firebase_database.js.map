{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/@firebase+util@0.3.2/node_modules/@firebase/util/src/constants.ts", "../../../../../node_modules/.pnpm/@firebase+util@0.3.2/node_modules/@firebase/util/src/assert.ts", "../../../../../node_modules/.pnpm/@firebase+util@0.3.2/node_modules/@firebase/util/src/crypt.ts", "../../../../../node_modules/.pnpm/@firebase+util@0.3.2/node_modules/@firebase/util/src/deepCopy.ts", "../../../../../node_modules/.pnpm/@firebase+util@0.3.2/node_modules/@firebase/util/src/deferred.ts", "../../../../../node_modules/.pnpm/@firebase+util@0.3.2/node_modules/@firebase/util/src/environment.ts", "../../../../../node_modules/.pnpm/@firebase+util@0.3.2/node_modules/@firebase/util/src/errors.ts", "../../../../../node_modules/.pnpm/@firebase+util@0.3.2/node_modules/@firebase/util/src/json.ts", "../../../../../node_modules/.pnpm/@firebase+util@0.3.2/node_modules/@firebase/util/src/jwt.ts", "../../../../../node_modules/.pnpm/@firebase+util@0.3.2/node_modules/@firebase/util/src/obj.ts", "../../../../../node_modules/.pnpm/@firebase+util@0.3.2/node_modules/@firebase/util/src/query.ts", "../../../../../node_modules/.pnpm/@firebase+util@0.3.2/node_modules/@firebase/util/src/sha1.ts", "../../../../../node_modules/.pnpm/@firebase+util@0.3.2/node_modules/@firebase/util/src/subscribe.ts", "../../../../../node_modules/.pnpm/@firebase+util@0.3.2/node_modules/@firebase/util/src/validation.ts", "../../../../../node_modules/.pnpm/@firebase+util@0.3.2/node_modules/@firebase/util/src/utf8.ts", "../../../../../node_modules/.pnpm/@firebase+util@0.3.2/node_modules/@firebase/util/src/exponential_backoff.ts", "../../../../../node_modules/.pnpm/@firebase+component@0.1.19/node_modules/@firebase/component/src/component.ts", "../../../../../node_modules/.pnpm/@firebase+component@0.1.19/node_modules/@firebase/component/src/constants.ts", "../../../../../node_modules/.pnpm/@firebase+component@0.1.19/node_modules/@firebase/component/src/provider.ts", "../../../../../node_modules/.pnpm/@firebase+component@0.1.19/node_modules/@firebase/component/src/component_container.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/storage/DOMStorageWrapper.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/storage/MemoryStorage.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/storage/storage.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/util/util.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/util/Path.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/realtime/Constants.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/RepoInfo.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/util/libs/parser.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/util/validation.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/api/onDisconnect.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/api/TransactionResult.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/util/NextPushId.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/snap/Node.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/snap/indexes/Index.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/snap/indexes/KeyIndex.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/snap/snap.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/snap/LeafNode.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/snap/indexes/PriorityIndex.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/util/SortedMap.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/snap/childSet.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/snap/IndexMap.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/snap/comparators.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/snap/ChildrenNode.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/snap/nodeFromJSON.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/snap/indexes/ValueIndex.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/snap/indexes/PathIndex.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/api/DataSnapshot.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/view/Event.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/view/EventRegistration.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/api/Query.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/util/ServerValues.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/SparseSnapshotTree.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/operation/Operation.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/operation/AckUserWrite.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/util/ImmutableTree.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/operation/ListenComplete.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/operation/Overwrite.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/operation/Merge.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/view/CacheNode.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/view/ViewCache.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/view/Change.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/view/filter/IndexedFilter.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/view/ChildChangeAccumulator.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/view/CompleteChildSource.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/view/ViewProcessor.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/view/EventGenerator.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/view/View.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/SyncPoint.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/CompoundWrite.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/WriteTree.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/SyncTree.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/SnapshotHolder.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/stats/StatsCollection.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/stats/StatsManager.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/stats/StatsListener.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/stats/StatsReporter.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/view/EventQueue.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/util/EventEmitter.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/util/VisibilityMonitor.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/util/OnlineMonitor.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/realtime/polling/PacketReceiver.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/realtime/BrowserPollConnection.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/version.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/realtime/WebSocketConnection.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/realtime/TransportManager.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/realtime/Connection.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/ServerActions.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/PersistentConnection.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/ReadonlyRestClient.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/Repo.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/view/filter/RangedFilter.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/view/filter/LimitedFilter.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/view/QueryParams.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/api/Reference.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/util/Tree.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/Repo_transaction.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/AuthTokenProvider.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/core/RepoManager.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/api/Database.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/api/internal.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/src/api/test_access.ts", "../../../../../node_modules/.pnpm/@firebase+database@0.6.13_@firebase+app-types@0.6.1/node_modules/@firebase/database/index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\n */\n\nexport const CONSTANTS = {\n  /**\n   * @define {boolean} Whether this is the client Node.js SDK.\n   */\n  NODE_CLIENT: false,\n  /**\n   * @define {boolean} Whether this is the Admin Node.js SDK.\n   */\n  NODE_ADMIN: false,\n\n  /**\n   * Firebase SDK Version\n   */\n  SDK_VERSION: '${JSCORE_VERSION}'\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Throws an error if the provided assertion is falsy\n */\nexport const assert = function (assertion: unknown, message: string): void {\n  if (!assertion) {\n    throw assertionError(message);\n  }\n};\n\n/**\n * Returns an Error object suitable for throwing.\n */\nexport const assertionError = function (message: string): Error {\n  return new Error(\n    'Firebase Database (' +\n      CONSTANTS.SDK_VERSION +\n      ') INTERNAL ASSERT FAILED: ' +\n      message\n  );\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function (str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function (bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\ninterface Base64 {\n  byteToCharMap_: { [key: number]: string } | null;\n  charToByteMap_: { [key: string]: number } | null;\n  byteToCharMapWebSafe_: { [key: number]: string } | null;\n  charToByteMapWebSafe_: { [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nexport const base64: Base64 = {\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw Error();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function (str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nexport function deepCopy<T>(value: T): T {\n  return deepExtend(undefined, value) as T;\n}\n\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n */\nexport function deepExtend(target: unknown, source: unknown): unknown {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      const dateValue = source as Date;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n      break;\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (const prop in source) {\n    if (!source.hasOwnProperty(prop)) {\n      continue;\n    }\n    (target as { [key: string]: unknown })[prop] = deepExtend(\n      (target as { [key: string]: unknown })[prop],\n      (source as { [key: string]: unknown })[prop]\n    );\n  }\n\n  return target;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => {};\n  resolve: (value?: unknown) => void = () => {};\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n    });\n  }\n\n  /**\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean {\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime {\n  id?: unknown;\n}\ndeclare const chrome: { runtime?: BrowserRuntime };\ndeclare const browser: { runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean {\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean {\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean {\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean {\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean {\n  return (\n    !isNode() &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean {\n  return 'indexedDB' in self && indexedDB != null;\n}\n\n/**\n * This method validates browser context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = window.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => {\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) {\n          window.indexedDB.deleteDatabase(DB_CHECK_NAME);\n        }\n        resolve(true);\n      };\n      request.onupgradeneeded = () => {\n        preExist = false;\n      };\n\n      request.onerror = () => {\n        reject(request.error?.message || '');\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean {\n  if (!navigator || !navigator.cookieEnabled) {\n    return false;\n  }\n  return true;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if (e.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\nexport interface FirebaseError extends Error, ErrorData {\n  // Unique code for error - format is service/error-code-string.\n  readonly code: string;\n\n  // Developer-friendly error message.\n  readonly message: string;\n\n  // Always 'FirebaseError'.\n  readonly name: typeof ERROR_NAME;\n\n  // Where available - stack backtrace in a string.\n  readonly stack?: string;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  readonly name = ERROR_NAME;\n\n  constructor(readonly code: string, message: string) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage);\n\n    // Keys with an underscore at the end of their name are not included in\n    // error.data for some reason.\n    // TODO: Replace with Object.entries when lib is updated to es2017.\n    for (const key of Object.keys(customData)) {\n      if (key.slice(-1) !== '_') {\n        if (key in error) {\n          console.warn(\n            `Overwriting FirebaseError base field \"${key}\" can cause unexpected behavior.`\n          );\n        }\n        error[key] = customData[key];\n      }\n    }\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Evaluates a JSON string into a javascript object.\n *\n * @param {string} str A string containing JSON.\n * @return {*} The javascript object representing the specified JSON.\n */\nexport function jsonEval(str: string): unknown {\n  return JSON.parse(str);\n}\n\n/**\n * Returns JSON representing a javascript object.\n * @param {*} data Javascript object to be stringified.\n * @return {string} The JSON contents of the object.\n */\nexport function stringify(data: unknown): string {\n  return JSON.stringify(data);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { jsonEval } from './json';\n\ninterface Claims {\n  [key: string]: {};\n}\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const decode = function (token: string): DecodedToken {\n  let header = {},\n    claims: Claims = {},\n    data = {},\n    signature = '';\n\n  try {\n    const parts = token.split('.');\n    header = jsonEval(base64Decode(parts[0]) || '') as object;\n    claims = jsonEval(base64Decode(parts[1]) || '') as Claims;\n    signature = parts[2];\n    data = claims['d'] || {};\n    delete claims['d'];\n  } catch (e) {}\n\n  return {\n    header,\n    claims,\n    data,\n    signature\n  };\n};\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidTimestamp = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  const now: number = Math.floor(new Date().getTime() / 1000);\n  let validSince: number = 0,\n    validUntil: number = 0;\n\n  if (typeof claims === 'object') {\n    if (claims.hasOwnProperty('nbf')) {\n      validSince = claims['nbf'] as number;\n    } else if (claims.hasOwnProperty('iat')) {\n      validSince = claims['iat'] as number;\n    }\n\n    if (claims.hasOwnProperty('exp')) {\n      validUntil = claims['exp'] as number;\n    } else {\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n    }\n  }\n\n  return (\n    !!now &&\n    !!validSince &&\n    !!validUntil &&\n    now >= validSince &&\n    now <= validUntil\n  );\n};\n\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const issuedAtTime = function (token: string): number | null {\n  const claims: Claims = decode(token).claims;\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n    return claims['iat'] as number;\n  }\n  return null;\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidFormat = function (token: string): boolean {\n  const decoded = decode(token),\n    claims = decoded.claims;\n\n  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\n};\n\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isAdmin = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nexport function isEmpty(obj: object): obj is {} {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: { [key in K]: V },\n  fn: (value: V, key: K, obj: { [key in K]: V }) => U,\n  contextObj?: unknown\n): { [key in K]: U } {\n  const res: Partial<{ [key in K]: U }> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res as { [key in K]: U };\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\n * params object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n */\nexport function querystring(querystringParams: {\n  [key: string]: string | number;\n}): string {\n  const params = [];\n  for (const [key, value] of Object.entries(querystringParams)) {\n    if (Array.isArray(value)) {\n      value.forEach(arrayVal => {\n        params.push(\n          encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal)\n        );\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  }\n  return params.length ? '&' + params.join('&') : '';\n}\n\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\n * (e.g. {arg: 'val', arg2: 'val2'})\n */\nexport function querystringDecode(querystring: string): object {\n  const obj: { [key: string]: unknown } = {};\n  const tokens = querystring.replace(/^\\?/, '').split('&');\n\n  tokens.forEach(token => {\n    if (token) {\n      const key = token.split('=');\n      obj[key[0]] = key[1];\n    }\n  });\n  return obj;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @final\n * @struct\n */\nexport class Sha1 {\n  /**\n   * Holds the previous values of accumulated variables a-e in the compress_\n   * function.\n   * @private\n   */\n  private chain_: number[] = [];\n\n  /**\n   * A buffer holding the partially computed hash result.\n   * @private\n   */\n  private buf_: number[] = [];\n\n  /**\n   * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n   * as the message schedule in the docs.\n   * @private\n   */\n  private W_: number[] = [];\n\n  /**\n   * Contains data needed to pad messages less than 64 bytes.\n   * @private\n   */\n  private pad_: number[] = [];\n\n  /**\n   * @private {number}\n   */\n  private inbuf_: number = 0;\n\n  /**\n   * @private {number}\n   */\n  private total_: number = 0;\n\n  blockSize: number;\n\n  constructor() {\n    this.blockSize = 512 / 8;\n\n    this.pad_[0] = 128;\n    for (let i = 1; i < this.blockSize; ++i) {\n      this.pad_[i] = 0;\n    }\n\n    this.reset();\n  }\n\n  reset(): void {\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  }\n\n  /**\n   * Internal compress helper function.\n   * @param buf Block to compress.\n   * @param offset Offset of the block in the buffer.\n   * @private\n   */\n  compress_(buf: number[] | Uint8Array | string, offset?: number): void {\n    if (!offset) {\n      offset = 0;\n    }\n\n    const W = this.W_;\n\n    // get 16 big endian words\n    if (typeof buf === 'string') {\n      for (let i = 0; i < 16; i++) {\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] =\n          (buf.charCodeAt(offset) << 24) |\n          (buf.charCodeAt(offset + 1) << 16) |\n          (buf.charCodeAt(offset + 2) << 8) |\n          buf.charCodeAt(offset + 3);\n        offset += 4;\n      }\n    } else {\n      for (let i = 0; i < 16; i++) {\n        W[i] =\n          (buf[offset] << 24) |\n          (buf[offset + 1] << 16) |\n          (buf[offset + 2] << 8) |\n          buf[offset + 3];\n        offset += 4;\n      }\n    }\n\n    // expand to 80 words\n    for (let i = 16; i < 80; i++) {\n      const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n    }\n\n    let a = this.chain_[0];\n    let b = this.chain_[1];\n    let c = this.chain_[2];\n    let d = this.chain_[3];\n    let e = this.chain_[4];\n    let f, k;\n\n    // TODO(user): Try to unroll this loop to speed up the computation.\n    for (let i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ (b & (c ^ d));\n          k = 0x5a827999;\n        } else {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        }\n      } else {\n        if (i < 60) {\n          f = (b & c) | (d & (b | c));\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n      }\n\n      const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n      e = d;\n      d = c;\n      c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n      b = a;\n      a = t;\n    }\n\n    this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n    this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n    this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n    this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n    this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n  }\n\n  update(bytes?: number[] | Uint8Array | string, length?: number): void {\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) {\n      return;\n    }\n\n    if (length === undefined) {\n      length = bytes.length;\n    }\n\n    const lengthMinusBlock = length - this.blockSize;\n    let n = 0;\n    // Using local instead of member variables gives ~5% speedup on Firefox 16.\n    const buf = this.buf_;\n    let inbuf = this.inbuf_;\n\n    // The outer while loop should execute at most twice.\n    while (n < length) {\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf === 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n\n      if (typeof bytes === 'string') {\n        while (n < length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      } else {\n        while (n < length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      }\n    }\n\n    this.inbuf_ = inbuf;\n    this.total_ += length;\n  }\n\n  /** @override */\n  digest(): number[] {\n    const digest: number[] = [];\n    let totalBits = this.total_ * 8;\n\n    // Add pad 0x80 0x00*.\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    }\n\n    // Add # bits.\n    for (let i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n    }\n\n    this.compress_(this.buf_);\n\n    let n = 0;\n    for (let i = 0; i < 5; i++) {\n      for (let j = 24; j >= 0; j -= 8) {\n        digest[n] = (this.chain_[i] >> j) & 255;\n        ++n;\n      }\n    }\n    return digest;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport type NextFn<T> = (value: T) => void;\nexport type ErrorFn = (error: Error) => void;\nexport type CompleteFn = () => void;\n\nexport interface Observer<T> {\n  // Called once for each value in a stream of values.\n  next: NextFn<T>;\n\n  // A stream terminates by a single call to EITHER error() or complete().\n  error: ErrorFn;\n\n  // No events will be sent to next() once complete() is called.\n  complete: CompleteFn;\n}\n\nexport type PartialObserver<T> = Partial<Observer<T>>;\n\n// TODO: Support also Unsubscribe.unsubscribe?\nexport type Unsubscribe = () => void;\n\n/**\n * The Subscribe interface has two forms - passing the inline function\n * callbacks, or a object interface with callback properties.\n */\nexport interface Subscribe<T> {\n  (next?: NextFn<T>, error?: ErrorFn, complete?: CompleteFn): Unsubscribe;\n  (observer: PartialObserver<T>): Unsubscribe;\n}\n\nexport interface Observable<T> {\n  // Subscribe method\n  subscribe: Subscribe<T>;\n}\n\nexport type Executor<T> = (observer: Observer<T>) => void;\n\n/**\n * Helper to make a Subscribe function (just like Promise helps make a\n * Thenable).\n *\n * @param executor Function which can make calls to a single Observer\n *     as a proxy.\n * @param onNoObservers Callback when count of Observers goes to zero.\n */\nexport function createSubscribe<T>(\n  executor: Executor<T>,\n  onNoObservers?: Executor<T>\n): Subscribe<T> {\n  const proxy = new ObserverProxy<T>(executor, onNoObservers);\n  return proxy.subscribe.bind(proxy);\n}\n\n/**\n * Implement fan-out for any number of Observers attached via a subscribe\n * function.\n */\nclass ObserverProxy<T> implements Observer<T> {\n  private observers: Array<Observer<T>> | undefined = [];\n  private unsubscribes: Unsubscribe[] = [];\n  private onNoObservers: Executor<T> | undefined;\n  private observerCount = 0;\n  // Micro-task scheduling by calling task.then().\n  private task = Promise.resolve();\n  private finalized = false;\n  private finalError?: Error;\n\n  /**\n   * @param executor Function which can make calls to a single Observer\n   *     as a proxy.\n   * @param onNoObservers Callback when count of Observers goes to zero.\n   */\n  constructor(executor: Executor<T>, onNoObservers?: Executor<T>) {\n    this.onNoObservers = onNoObservers;\n    // Call the executor asynchronously so subscribers that are called\n    // synchronously after the creation of the subscribe function\n    // can still receive the very first value generated in the executor.\n    this.task\n      .then(() => {\n        executor(this);\n      })\n      .catch(e => {\n        this.error(e);\n      });\n  }\n\n  next(value: T): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.next(value);\n    });\n  }\n\n  error(error: Error): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.error(error);\n    });\n    this.close(error);\n  }\n\n  complete(): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.complete();\n    });\n    this.close();\n  }\n\n  /**\n   * Subscribe function that can be used to add an Observer to the fan-out list.\n   *\n   * - We require that no event is sent to a subscriber sychronously to their\n   *   call to subscribe().\n   */\n  subscribe(\n    nextOrObserver?: NextFn<T> | PartialObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ): Unsubscribe {\n    let observer: Observer<T>;\n\n    if (\n      nextOrObserver === undefined &&\n      error === undefined &&\n      complete === undefined\n    ) {\n      throw new Error('Missing Observer.');\n    }\n\n    // Assemble an Observer object when passed as callback functions.\n    if (\n      implementsAnyMethods(nextOrObserver as { [key: string]: unknown }, [\n        'next',\n        'error',\n        'complete'\n      ])\n    ) {\n      observer = nextOrObserver as Observer<T>;\n    } else {\n      observer = {\n        next: nextOrObserver as NextFn<T>,\n        error,\n        complete\n      } as Observer<T>;\n    }\n\n    if (observer.next === undefined) {\n      observer.next = noop as NextFn<T>;\n    }\n    if (observer.error === undefined) {\n      observer.error = noop as ErrorFn;\n    }\n    if (observer.complete === undefined) {\n      observer.complete = noop as CompleteFn;\n    }\n\n    const unsub = this.unsubscribeOne.bind(this, this.observers!.length);\n\n    // Attempt to subscribe to a terminated Observable - we\n    // just respond to the Observer with the final error or complete\n    // event.\n    if (this.finalized) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.task.then(() => {\n        try {\n          if (this.finalError) {\n            observer.error(this.finalError);\n          } else {\n            observer.complete();\n          }\n        } catch (e) {\n          // nothing\n        }\n        return;\n      });\n    }\n\n    this.observers!.push(observer as Observer<T>);\n\n    return unsub;\n  }\n\n  // Unsubscribe is synchronous - we guarantee that no events are sent to\n  // any unsubscribed Observer.\n  private unsubscribeOne(i: number): void {\n    if (this.observers === undefined || this.observers[i] === undefined) {\n      return;\n    }\n\n    delete this.observers[i];\n\n    this.observerCount -= 1;\n    if (this.observerCount === 0 && this.onNoObservers !== undefined) {\n      this.onNoObservers(this);\n    }\n  }\n\n  private forEachObserver(fn: (observer: Observer<T>) => void): void {\n    if (this.finalized) {\n      // Already closed by previous event....just eat the additional values.\n      return;\n    }\n\n    // Since sendOne calls asynchronously - there is no chance that\n    // this.observers will become undefined.\n    for (let i = 0; i < this.observers!.length; i++) {\n      this.sendOne(i, fn);\n    }\n  }\n\n  // Call the Observer via one of it's callback function. We are careful to\n  // confirm that the observe has not been unsubscribed since this asynchronous\n  // function had been queued.\n  private sendOne(i: number, fn: (observer: Observer<T>) => void): void {\n    // Execute the callback asynchronously\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.task.then(() => {\n      if (this.observers !== undefined && this.observers[i] !== undefined) {\n        try {\n          fn(this.observers[i]);\n        } catch (e) {\n          // Ignore exceptions raised in Observers or missing methods of an\n          // Observer.\n          // Log error to console. b/31404806\n          if (typeof console !== 'undefined' && console.error) {\n            console.error(e);\n          }\n        }\n      }\n    });\n  }\n\n  private close(err?: Error): void {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    if (err !== undefined) {\n      this.finalError = err;\n    }\n    // Proxy is no longer needed - garbage collect references\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.task.then(() => {\n      this.observers = undefined;\n      this.onNoObservers = undefined;\n    });\n  }\n}\n\n/** Turn synchronous function into one called asynchronously. */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(fn: Function, onError?: ErrorFn): Function {\n  return (...args: unknown[]) => {\n    Promise.resolve(true)\n      .then(() => {\n        fn(...args);\n      })\n      .catch((error: Error) => {\n        if (onError) {\n          onError(error);\n        }\n      });\n  };\n}\n\n/**\n * Return true if the object passed in implements any of the named methods.\n */\nfunction implementsAnyMethods(\n  obj: { [key: string]: unknown },\n  methods: string[]\n): boolean {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  for (const method of methods) {\n    if (method in obj && typeof obj[method] === 'function') {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction noop(): void {\n  // do nothing\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param fnName The function name\n * @param minCount The minimum number of arguments to allow for the function call\n * @param maxCount The maximum number of argument to allow for the function call\n * @param argCount The actual number of arguments provided.\n */\nexport const validateArgCount = function (\n  fnName: string,\n  minCount: number,\n  maxCount: number,\n  argCount: number\n): void {\n  let argError;\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n  if (argError) {\n    const error =\n      fnName +\n      ' failed: Was called with ' +\n      argCount +\n      (argCount === 1 ? ' argument.' : ' arguments.') +\n      ' Expects ' +\n      argError +\n      '.';\n    throw new Error(error);\n  }\n};\n\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param fnName The function name\n * @param argumentNumber The index of the argument\n * @param optional Whether or not the argument is optional\n * @return The prefix to add to the error thrown for validation.\n */\nexport function errorPrefix(\n  fnName: string,\n  argumentNumber: number,\n  optional: boolean\n): string {\n  let argName = '';\n  switch (argumentNumber) {\n    case 1:\n      argName = optional ? 'first' : 'First';\n      break;\n    case 2:\n      argName = optional ? 'second' : 'Second';\n      break;\n    case 3:\n      argName = optional ? 'third' : 'Third';\n      break;\n    case 4:\n      argName = optional ? 'fourth' : 'Fourth';\n      break;\n    default:\n      throw new Error(\n        'errorPrefix called with argumentNumber > 4.  Need to update it?'\n      );\n  }\n\n  let error = fnName + ' failed: ';\n\n  error += argName + ' argument ';\n  return error;\n}\n\n/**\n * @param fnName\n * @param argumentNumber\n * @param namespace\n * @param optional\n */\nexport function validateNamespace(\n  fnName: string,\n  argumentNumber: number,\n  namespace: string,\n  optional: boolean\n): void {\n  if (optional && !namespace) {\n    return;\n  }\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(\n      errorPrefix(fnName, argumentNumber, optional) +\n        'must be a valid firebase namespace.'\n    );\n  }\n}\n\nexport function validateCallback(\n  fnName: string,\n  argumentNumber: number,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback: Function,\n  optional: boolean\n): void {\n  if (optional && !callback) {\n    return;\n  }\n  if (typeof callback !== 'function') {\n    throw new Error(\n      errorPrefix(fnName, argumentNumber, optional) +\n        'must be a valid function.'\n    );\n  }\n}\n\nexport function validateContextObject(\n  fnName: string,\n  argumentNumber: number,\n  context: unknown,\n  optional: boolean\n): void {\n  if (optional && !context) {\n    return;\n  }\n  if (typeof context !== 'object' || context === null) {\n    throw new Error(\n      errorPrefix(fnName, argumentNumber, optional) +\n        'must be a valid context object.'\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from './assert';\n\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n\n/**\n * @param {string} str\n * @return {Array}\n */\nexport const stringToByteArray = function (str: string): number[] {\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n\n    // Is this the lead surrogate in a surrogate pair?\n    if (c >= 0xd800 && c <= 0xdbff) {\n      const high = c - 0xd800; // the high 10 bits.\n      i++;\n      assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n      const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n      c = 0x10000 + (high << 10) + low;\n    }\n\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (c < 65536) {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nexport const stringLength = function (str: string): number {\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c < 128) {\n      p++;\n    } else if (c < 2048) {\n      p += 2;\n    } else if (c >= 0xd800 && c <= 0xdbff) {\n      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n      p += 4;\n      i++; // skip trail surrogate.\n    } else {\n      p += 3;\n    }\n  }\n  return p;\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The amount of milliseconds to exponentially increase.\n */\nconst DEFAULT_INTERVAL_MILLIS = 1000;\n\n/**\n * The factor to backoff by.\n * Should be a number greater than 1.\n */\nconst DEFAULT_BACKOFF_FACTOR = 2;\n\n/**\n * The maximum milliseconds to increase to.\n *\n * <p>Visible for testing\n */\nexport const MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\n\n/**\n * The percentage of backoff time to randomize by.\n * See\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\n * for context.\n *\n * <p>Visible for testing\n */\nexport const RANDOM_FACTOR = 0.5;\n\n/**\n * Based on the backoff method from\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\n */\nexport function calculateBackoffMillis(\n  backoffCount: number,\n  intervalMillis: number = DEFAULT_INTERVAL_MILLIS,\n  backoffFactor: number = DEFAULT_BACKOFF_FACTOR\n): number {\n  // Calculates an exponentially increasing value.\n  // Deviation: calculates value from count and a constant interval, so we only need to save value\n  // and count to restore state.\n  const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\n\n  // A random \"fuzz\" to avoid waves of retries.\n  // Deviation: randomFactor is required.\n  const randomWait = Math.round(\n    // A fraction of the backoff value to add/subtract.\n    // Deviation: changes multiplication order to improve readability.\n    RANDOM_FACTOR *\n      currBaseValue *\n      // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\n      // if we add or subtract.\n      (Math.random() - 0.5) *\n      2\n  );\n\n  // Limits backoff to max to avoid effectively permanent backoff.\n  return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { InstantiationMode, Name, NameServiceMapping } from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier: string = DEFAULT_ENTRY_NAME): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n      // If the service instance is available, resolve the promise with it immediately\n      try {\n        const instance = this.getOrInitializeService(normalizedIdentifier);\n        if (instance) {\n          deferred.resolve(instance);\n        }\n      } catch (e) {\n        // when the instance factory throws an exception during get(), it should not cause\n        // a fatal error. We just return the unresolved promise in this case.\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    const { identifier, optional } = {\n      identifier: DEFAULT_ENTRY_NAME,\n      optional: false,\n      ...options\n    };\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    try {\n      const instance = this.getOrInitializeService(normalizedIdentifier);\n\n      if (!instance) {\n        if (optional) {\n          return null;\n        }\n        throw Error(`Service ${this.name} is not available`);\n      }\n      return instance;\n    } catch (e) {\n      if (optional) {\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService(DEFAULT_ENTRY_NAME);\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier = this.normalizeInstanceIdentifier(\n        instanceIdentifier\n      );\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService(normalizedIdentifier)!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  private getOrInitializeService(\n    identifier: string\n  ): NameServiceMapping[T] | null {\n    let instance = this.instances.get(identifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(\n        this.container,\n        normalizeIdentifierForFactory(identifier)\n      ) as NameServiceMapping[T];\n      this.instances.set(identifier, instance);\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(identifier: string): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager(component: Component<Name>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n * @constructor\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param {string} key The key to save the value under\n   * @param {?Object} value The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @return {*} The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  /**\n   * @param {string} key\n   */\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  /**\n   * @param {string} name\n   * @return {string}\n   */\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n *\n * @constructor\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param {string} domStorageName Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @return {?} Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../../api/Query';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\nimport { SessionStorage } from '../storage/storage';\nimport { Logger, LogLevel } from '@firebase/logger';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n * @type {function(): number} Generated ID.\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param {!string} str The string to hash\n * @return {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\n/**\n * @param {...*} varArgs\n * @return {string}\n * @private\n */\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n * @type {?function(string)}\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n * @type {boolean}\n * @private\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\n/**\n *\n * @param {...(string|Arguments)} varArgs\n */\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\n/**\n * @param {!string} prefix\n * @return {function(...[*])}\n */\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\n/**\n * @param {...string} varArgs\n */\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\n/**\n * @param {...string} varArgs\n */\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\n/**\n * @param {...*} varArgs\n */\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\n/**\n * @param {!String} methodName\n */\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n * @param {*} data\n * @return {boolean}\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\n/**\n * @param {function()} fn\n */\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n * @type {!string}\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n * @type {!string}\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n * @param {!string} a\n * @param {!string} b\n * @return {!number}\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @param {!string} a\n * @param {!string} b\n * @return {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * @param {string} key\n * @param {Object} obj\n * @return {*}\n */\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\n/**\n * @param {*} obj\n * @return {string}\n */\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param {!string} str The string\n * @param {!number} segsize The maximum number of chars in the string.\n * @return {Array.<string>} The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj The object or array to iterate over\n * @param fn The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param {function(*)} callback Callback function.\n * @param {?Object=} context Optional context to bind to.\n * @return {function(*)}\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param {!number} v A double\n * @return {string}\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n * @return {boolean}\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n * @return {boolean}\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n * @param {!string} code\n * @param {!Query} query\n * @return {Error}\n */\nexport const errorForServerCode = function (code: string, query: Query): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query.path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n};\n\n/**\n * Used to test for integer-looking strings\n * @type {RegExp}\n * @private\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n * @param {!string} str\n * @return {?number}\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= -2147483648 && intVal <= 2147483647) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param {!function()} fn The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param {?Function=} callback Optional onComplete callback.\n * @param {...*} varArgs Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @return {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n *\n * @param {!Object} object\n * @param {string} name\n * @param {!function(): *} fnGet\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param {Function} fn Function to run.\n * @param {number} time Milliseconds to wait before running.\n * @return {number|Object} The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from './util';\nimport { stringLength } from '@firebase/util';\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  private pieces_: string[];\n  private pieceNum_: number;\n\n  /**\n   * Singleton to represent an empty path\n   *\n   * @const\n   */\n  static get Empty() {\n    return new Path('');\n  }\n\n  /**\n   * @param {string|Array.<string>} pathOrString Path string to parse,\n   *      or another path, or the raw tokens array\n   * @param {number=} pieceNum\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  getFront(): string | null {\n    if (this.pieceNum_ >= this.pieces_.length) {\n      return null;\n    }\n\n    return this.pieces_[this.pieceNum_];\n  }\n\n  /**\n   * @return {number} The number of segments in this path\n   */\n  getLength(): number {\n    return this.pieces_.length - this.pieceNum_;\n  }\n\n  /**\n   * @return {!Path}\n   */\n  popFront(): Path {\n    let pieceNum = this.pieceNum_;\n    if (pieceNum < this.pieces_.length) {\n      pieceNum++;\n    }\n    return new Path(this.pieces_, pieceNum);\n  }\n\n  /**\n   * @return {?string}\n   */\n  getBack(): string | null {\n    if (this.pieceNum_ < this.pieces_.length) {\n      return this.pieces_[this.pieces_.length - 1];\n    }\n\n    return null;\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n\n  toUrlEncodedString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\n      }\n    }\n\n    return pathString || '/';\n  }\n\n  /**\n   * Shallow copy of the parts of the path.\n   *\n   * @param {number=} begin\n   * @return {!Array<string>}\n   */\n  slice(begin: number = 0): string[] {\n    return this.pieces_.slice(this.pieceNum_ + begin);\n  }\n\n  /**\n   * @return {?Path}\n   */\n  parent(): Path | null {\n    if (this.pieceNum_ >= this.pieces_.length) {\n      return null;\n    }\n\n    const pieces = [];\n    for (let i = this.pieceNum_; i < this.pieces_.length - 1; i++) {\n      pieces.push(this.pieces_[i]);\n    }\n\n    return new Path(pieces, 0);\n  }\n\n  /**\n   * @param {string|!Path} childPathObj\n   * @return {!Path}\n   */\n  child(childPathObj: string | Path): Path {\n    const pieces = [];\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      pieces.push(this.pieces_[i]);\n    }\n\n    if (childPathObj instanceof Path) {\n      for (\n        let i = childPathObj.pieceNum_;\n        i < childPathObj.pieces_.length;\n        i++\n      ) {\n        pieces.push(childPathObj.pieces_[i]);\n      }\n    } else {\n      const childPieces = childPathObj.split('/');\n      for (let i = 0; i < childPieces.length; i++) {\n        if (childPieces[i].length > 0) {\n          pieces.push(childPieces[i]);\n        }\n      }\n    }\n\n    return new Path(pieces, 0);\n  }\n\n  /**\n   * @return {boolean} True if there are no segments in this path\n   */\n  isEmpty(): boolean {\n    return this.pieceNum_ >= this.pieces_.length;\n  }\n\n  /**\n   * @param {!Path} outerPath\n   * @param {!Path} innerPath\n   * @return {!Path} The path from outerPath to innerPath\n   */\n  static relativePath(outerPath: Path, innerPath: Path): Path {\n    const outer = outerPath.getFront(),\n      inner = innerPath.getFront();\n    if (outer === null) {\n      return innerPath;\n    } else if (outer === inner) {\n      return Path.relativePath(outerPath.popFront(), innerPath.popFront());\n    } else {\n      throw new Error(\n        'INTERNAL ERROR: innerPath (' +\n          innerPath +\n          ') is not within ' +\n          'outerPath (' +\n          outerPath +\n          ')'\n      );\n    }\n  }\n\n  /**\n   * @param {!Path} left\n   * @param {!Path} right\n   * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\n   */\n  static comparePaths(left: Path, right: Path): number {\n    const leftKeys = left.slice();\n    const rightKeys = right.slice();\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n      const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n      if (cmp !== 0) {\n        return cmp;\n      }\n    }\n    if (leftKeys.length === rightKeys.length) {\n      return 0;\n    }\n    return leftKeys.length < rightKeys.length ? -1 : 1;\n  }\n\n  /**\n   *\n   * @param {Path} other\n   * @return {boolean} true if paths are the same.\n   */\n  equals(other: Path): boolean {\n    if (this.getLength() !== other.getLength()) {\n      return false;\n    }\n\n    for (\n      let i = this.pieceNum_, j = other.pieceNum_;\n      i <= this.pieces_.length;\n      i++, j++\n    ) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   *\n   * @param {!Path} other\n   * @return {boolean} True if this path is a parent (or the same as) other\n   */\n  contains(other: Path): boolean {\n    let i = this.pieceNum_;\n    let j = other.pieceNum_;\n    if (this.getLength() > other.getLength()) {\n      return false;\n    }\n    while (i < this.pieces_.length) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n      ++i;\n      ++j;\n    }\n    return true;\n  }\n} // end Path\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  /** @type {!Array<string>} */\n  private parts_: string[];\n  /** @type {number} Initialize to number of '/' chars needed in path. */\n  private byteLength_: number;\n\n  /**\n   * @param {!Path} path Initial Path.\n   * @param {string} errorPrefix_ Prefix for any error messages.\n   */\n  constructor(path: Path, private errorPrefix_: string) {\n    /** @type {!Array<string>} */\n    this.parts_ = path.slice();\n    /** @type {number} Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    this.checkValid_();\n  }\n\n  /** @const {number} Maximum key depth. */\n  static get MAX_PATH_DEPTH() {\n    return 32;\n  }\n\n  /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\n  static get MAX_PATH_LENGTH_BYTES() {\n    return 768;\n  }\n\n  /** @param {string} child */\n  push(child: string) {\n    // Count the needed '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ += 1;\n    }\n    this.parts_.push(child);\n    this.byteLength_ += stringLength(child);\n    this.checkValid_();\n  }\n\n  pop() {\n    const last = this.parts_.pop();\n    this.byteLength_ -= stringLength(last);\n    // Un-count the previous '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ -= 1;\n    }\n  }\n\n  private checkValid_() {\n    if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\n      throw new Error(\n        this.errorPrefix_ +\n          'has a key path longer than ' +\n          ValidationPath.MAX_PATH_LENGTH_BYTES +\n          ' bytes (' +\n          this.byteLength_ +\n          ').'\n      );\n    }\n    if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\n      throw new Error(\n        this.errorPrefix_ +\n          'path specified exceeds the maximum depth that can be written (' +\n          ValidationPath.MAX_PATH_DEPTH +\n          ') or object contains a cycle ' +\n          this.toErrorString()\n      );\n    }\n  }\n\n  /**\n   * String for use in error messages - uses '.' notation for path.\n   *\n   * @return {string}\n   */\n  toErrorString(): string {\n    if (this.parts_.length === 0) {\n      return '';\n    }\n    return \"in property '\" + this.parts_.join('.') + \"'\";\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\nexport const FORGE_DOMAIN = 'firebaseio.com';\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { PersistentStorage } from './storage/storage';\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n *\n * @constructor\n */\nexport class RepoInfo {\n  host: string;\n  domain: string;\n  internalHost: string;\n\n  /**\n   * @param host Hostname portion of the url for the repo\n   * @param secure Whether or not this repo is accessed over ssl\n   * @param namespace The namespace represented by the repo\n   * @param webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin Whether this instance uses Admin SDK credentials\n   * @param persistenceKey Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this.host = host.toLowerCase();\n    this.domain = this.host.substr(this.host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this.host;\n  }\n\n  needsQueryParam(): boolean {\n    return (\n      this.host !== this.internalHost ||\n      this.isCustomHost() ||\n      this.includeNamespaceInQueryParams\n    );\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isDemoHost() {\n    return this.domain === 'firebaseio-demo.com';\n  }\n\n  isCustomHost() {\n    return (\n      this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  updateHost(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this.host, this.internalHost);\n      }\n    }\n  }\n\n  /**\n   * Returns the websocket URL for this repo\n   * @param {string} type of connection\n   * @param {Object} params list\n   * @return {string} The URL for this repo\n   */\n  connectionURL(type: string, params: { [k: string]: string }): string {\n    assert(typeof type === 'string', 'typeof type must == string');\n    assert(typeof params === 'object', 'typeof params must == object');\n\n    let connURL: string;\n    if (type === WEBSOCKET) {\n      connURL =\n        (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n    } else if (type === LONG_POLLING) {\n      connURL =\n        (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n    } else {\n      throw new Error('Unknown connection type: ' + type);\n    }\n    if (this.needsQueryParam()) {\n      params['ns'] = this.namespace;\n    }\n\n    const pairs: string[] = [];\n\n    each(params, (key: string, value: string) => {\n      pairs.push(key + '=' + value);\n    });\n\n    return connURL + pairs.join('&');\n  }\n\n  /** @return {string} */\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  /** @return {string} */\n  toURLString(): string {\n    return (this.secure ? 'https://' : 'http://') + this.host;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../Path';\nimport { RepoInfo } from '../../RepoInfo';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\n/**\n * @param {!string} pathString\n * @return {string}\n */\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @param {!string} queryString\n * @return {!{[key:string]:string}} key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      nodeAdmin,\n      webSocketOnly,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\n/**\n *\n * @param {!string} dataURL\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string, namespace: string}}\n */\nexport const parseDatabaseURL = function (\n  dataURL: string\n): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, ValidationPath } from './Path';\nimport {\n  contains,\n  safeGet,\n  errorPrefix as errorPrefixFxn,\n  stringLength\n} from '@firebase/util';\nimport { isInvalidJSONNumber, each } from './util';\n\nimport { RepoInfo } from '../RepoInfo';\n\n/**\n * True for invalid Firebase keys\n * @type {RegExp}\n * @private\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n * @type {RegExp}\n * @private\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n * @type {number}\n * @private\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\n/**\n * @param {*} key\n * @return {boolean}\n */\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\n/**\n * @param {string} pathString\n * @return {boolean}\n */\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\n/**\n * @param {string} pathString\n * @return {boolean}\n */\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\n/**\n * @param {*} priority\n * @return {boolean}\n */\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n *\n * @param {string} fnName\n * @param {number} argumentNumber\n * @param {*} data\n * @param {!Path} path\n * @param {boolean} optional\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  argumentNumber: number,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  validateFirebaseData(\n    errorPrefixFxn(fnName, argumentNumber, optional),\n    data,\n    path\n  );\n};\n\n/**\n * Validate a data object client-side before sending to server.\n *\n * @param {string} errorPrefix\n * @param {*} data\n * @param {!Path|!ValidationPath} path_\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        path.toErrorString() +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString()\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        path.toErrorString() +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              path.toErrorString() +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      path.push(key);\n      validateFirebaseData(errorPrefix, value, path);\n      path.pop();\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          path.toErrorString() +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n *\n * @param {string} errorPrefix\n * @param {Array<!Path>} mergePaths\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = curPath.slice();\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(Path.comparePaths);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && prevPath.contains(curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n *\n * @param {string} fnName\n * @param {number} argumentNumber\n * @param {*} data\n * @param {!Path} path\n * @param {boolean} optional\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  argumentNumber: number,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, argumentNumber, optional);\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, path.child(curPath));\n    if (curPath.getBack() === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  argumentNumber: number,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateEventType = function (\n  fnName: string,\n  argumentNumber: number,\n  eventType: string,\n  optional: boolean\n) {\n  if (optional && eventType === undefined) {\n    return;\n  }\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n    default:\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n          '\"child_changed\", or \"child_moved\".'\n      );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentNumber: number,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\nexport const validatePathString = function (\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentNumber, pathString, optional);\n};\n\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (path.getFront() === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  argumentNumber: number,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, false) +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateCredential = function (\n  fnName: string,\n  argumentNumber: number,\n  cred: unknown,\n  optional: boolean\n) {\n  if (optional && cred === undefined) {\n    return;\n  }\n  if (!(typeof cred === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid credential (a string).'\n    );\n  }\n};\n\nexport const validateBoolean = function (\n  fnName: string,\n  argumentNumber: number,\n  bool: unknown,\n  optional: boolean\n) {\n  if (optional && bool === undefined) {\n    return;\n  }\n  if (typeof bool !== 'boolean') {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) + 'must be a boolean.'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentNumber: number,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentNumber: number,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentNumber: number,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback, Deferred } from '@firebase/util';\nimport {\n  validateWritablePath,\n  validateFirebaseDataArg,\n  validatePriority,\n  validateFirebaseMergeDataArg\n} from '../core/util/validation';\nimport { warn } from '../core/util/util';\n\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport { Indexable } from '../core/util/misc';\n\n/**\n * @constructor\n */\nexport class OnDisconnect {\n  /**\n   * @param {!Repo} repo_\n   * @param {!Path} path_\n   */\n  constructor(private repo_: Repo, private path_: Path) {}\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  cancel(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectCancel(\n      this.path_,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateWritablePath('OnDisconnect.remove', this.path_);\n    validateCallback('OnDisconnect.remove', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  set(value: unknown, onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.set', this.path_);\n    validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n    validateCallback('OnDisconnect.set', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      value,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {number|string|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      1,\n      value,\n      this.path_,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n    validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSetWithPriority(\n      this.path_,\n      value,\n      priority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  update(\n    objectToMerge: Indexable,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.update', this.path_);\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\n          'existing data, or an Object with integer keys if you really do want to only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      1,\n      objectToMerge,\n      this.path_,\n      false\n    );\n    validateCallback('OnDisconnect.update', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectUpdate(\n      this.path_,\n      objectToMerge,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSnapshot } from './DataSnapshot';\nimport { validateArgCount } from '@firebase/util';\n\nexport class TransactionResult {\n  /**\n   * A type for the resolve value of Firebase.transaction.\n   * @constructor\n   * @dict\n   * @param {boolean} committed\n   * @param {DataSnapshot} snapshot\n   */\n  constructor(public committed: boolean, public snapshot: DataSnapshot) {}\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): object {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Modeled after base64 web-safe chars, but ordered by ASCII.\n  const PUSH_CHARS =\n    '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @return {boolean} Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @return {!Node} The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param {!Node} newPriorityNode New priority to set for the node.\n   * @return {!Node} Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param {string} childName The name of the child to retrieve.\n   * @return {!Node} The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param {!Path} path The path of the child to retrieve.\n   * @return {!Node} The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param {!string} childName The name of the child to find the predecessor of.\n   * @param {!Node} childNode The node to find the predecessor of.\n   * @param {!Index} index The index to use to determine the predecessor\n   * @return {?string} The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param {string} childName The name of the child to update.\n   * @param {!Node} newChildNode The new child node\n   * @return {!Node} The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param {!Path} path The path of the child to update.\n   * @param {!Node} newChildNode The new child node, which may be an empty node\n   * @return {!Node} The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   * @param {!string} childName\n   * @return {boolean}\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @return {boolean} True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @return {number} The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param {!Index} index\n   * @param {function(string, !Node)} action Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @return {*} The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat True for export format (also wire protocol format).\n   * @return Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @return {string} hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param {!Node} other Another node\n   * @return {!number} -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @param {!Node} other\n   * @return {boolean} Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {!Node} This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {boolean}\n   */\n  isIndexed(indexDefinition: Index): boolean;\n}\n\n/**\n *\n * @param {!string} name\n * @param {!Node} node\n * @constructor\n * @struct\n */\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  /**\n   *\n   * @param {!string} name\n   * @param {!Node} node\n   * @return {NamedNode}\n   */\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node, NamedNode } from '../Node';\nimport { MIN_NAME, MAX_NAME } from '../../util/util';\nimport { Comparator } from '../../util/SortedMap';\n\n/**\n *\n * @constructor\n */\nexport abstract class Index {\n  /**\n   * @param {!NamedNode} a\n   * @param {!NamedNode} b\n   * @return {number}\n   */\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  /**\n   * @param {!Node} node\n   * @return {boolean}\n   */\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   * @param {!Node} oldNode\n   * @param {!Node} newNode\n   * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @return {!NamedNode} a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @return {!NamedNode} a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { Node, NamedNode } from '../Node';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildrenNode } from '../ChildrenNode';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\nimport { Indexable } from '../util/misc';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @param {(!string|!number)} priority\n * @return {!string}\n */\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n *\n * @param {!Node} priorityNode\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\nimport { priorityHashText, validatePriorityNode } from './snap';\nimport { Node } from './Node';\nimport { Path } from '../util/Path';\nimport { Index } from './indexes/Index';\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Indexable } from '../util/misc';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   * @type {Array.<!string>}\n   * @const\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @implements {Node}\n   * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\n   *                                         The object type is possible in the event of a deferred value\n   * @param {!Node=} priorityNode_ The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (path.isEmpty()) {\n      return this;\n    } else if (path.getFront() === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || path.getLength() === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          path.popFront(),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @return {Object|string|number|boolean} The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   * @param {!LeafNode} otherLeaf\n   * @return {!number}\n   * @private\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(): Node {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    /**\n     * @inheritDoc\n     */\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { LeafNode } from '../LeafNode';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class PriorityIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  /** @private\n   * @type {Array.<!LLRBNode>}\n   */\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @template K, V, T\n   * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\n   * @param {?K} startKey\n   * @param {function(K, K): number} comparator\n   * @param {boolean} isReverse_ Whether or not to iterate in reverse\n   * @param {(function(K, V):T)=} resultGenerator_\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = ({ key: node.key, value: node.value } as unknown) as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return ({ key: node.key, value: node.value } as unknown) as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @template K, V\n   * @param {!K} key Key associated with this node.\n   * @param {!V} value Value associated with this node.\n   * @param {?boolean} color Whether this node is red.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param {?K} key New key for the node, or null.\n   * @param {?V} value New value for the node, or null.\n   * @param {?boolean} color New color for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\n   * @return {!LLRBNode} The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {*} True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @return {!Object} The minimum node in the tree.\n   * @private\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   *\n   * @param {!Object} key Key to insert.\n   * @param {!Object} value Value to insert.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param {!Object} key The key of the item to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @private\n   * @return {boolean} Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @private\n   * @return {boolean} True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @return {!LLRBEmptyNode} The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBEmptyNode} New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  /**\n   * @return {null}\n   */\n  minKey(): null {\n    return null;\n  }\n\n  /**\n   * @return {null}\n   */\n  maxKey(): null {\n    return null;\n  }\n\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @private\n   * @return {boolean} Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   * @const\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @template K, V\n   * @param {function(K, K):number} comparator_ Key comparator.\n   * @param {LLRBNode=} root_ (Optional) Root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @return {!SortedMap.<K, V>} New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @return {!SortedMap.<K, V>} New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param {!K} key The key to look up.\n   * @return {?V} The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param {K} key The key to find the predecessor of\n   * @return {?K} The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @return {boolean} True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @return {number} The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @return {?K} The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @return {?K} The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @template T\n   * @param {(function(K, V):T)=} resultGenerator\n   * @return {SortedMapIterator.<K, V, T>} The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\n/**\n * @constructor\n */\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  /**\n   * @param {number} length\n   */\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @template K, V\n * @param {Array.<!NamedNode>} childList Unsorted list of children\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\n *                                                        type is not NamedNode\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\n * @return {SortedMap.<K, V>}\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          (namedNode.node as unknown) as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\nimport { buildChildSet } from './childSet';\n\nimport { NamedNode, Node } from './Node';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { SortedMap } from '../util/SortedMap';\nimport { Index } from './indexes/Index';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { sha1, MAX_NAME, MIN_NAME } from '../util/util';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { Node, NamedNode } from './Node';\nimport { validatePriorityNode, priorityHashText, setMaxNode } from './snap';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { Path } from '../util/Path';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n *\n * @constructor\n * @implements {Node}\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   *\n   * @param {!SortedMap.<string, !Node>} children_ List of children\n   * of this node..\n   * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\n   * @param {!IndexMap} indexMap_\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(path.popFront());\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        path.getFront() !== '.priority' || path.getLength() === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        path.popFront(),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  /**\n   * @private\n   * @type {RegExp}\n   */\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[(key as unknown) as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?string}\n   */\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?NamedNode}\n   */\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   * @param {!Index} indexDefinition\n   * @return {?string}\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?NamedNode}\n   */\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {SortedMapIterator}\n   */\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  /**\n   *\n   * @param {!NamedNode} startPost\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  /**\n   * @param {!NamedNode} endPost\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   * @private\n   * @param {!Index} indexDefinition\n   * @return {?SortedMap.<NamedNode, Node>}\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\n/**\n * @constructor\n * @extends {ChildrenNode}\n * @private\n */\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n * @type {!MAX_NODE}\n * @const\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { contains, assert } from '@firebase/util';\n\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { IndexMap } from './IndexMap';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\nimport { Indexable } from '../util/misc';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param {*} json JSON to create a node for.\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n * @return {!Node}\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { NamedNode, Node } from '../Node';\nimport { nameCompare } from '../../util/util';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class ValueIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { Index } from './Index';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\nimport { Path } from '../../util/Path';\n\n/**\n * @param {!Path} indexPath\n * @constructor\n * @extends {Index}\n */\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !indexPath_.isEmpty() && indexPath_.getFront() !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  /**\n   * @param {!Node} snap\n   * @return {!Node}\n   * @protected\n   */\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.indexPath_.slice().join('/');\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback } from '@firebase/util';\nimport { validatePathString } from '../core/util/validation';\nimport { Path } from '../core/util/Path';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { Reference } from './Reference';\nimport { Index } from '../core/snap/indexes/Index';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\n\n/**\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\n * surfaces the public methods (val, forEach, etc.) we want to expose.\n */\nexport class DataSnapshot {\n  /**\n   * @param {!Node} node_ A SnapshotNode to wrap.\n   * @param {!Reference} ref_ The ref of the location this snapshot came from.\n   * @param {!Index} index_ The iteration order for this snapshot\n   */\n  constructor(\n    private readonly node_: Node,\n    private readonly ref_: Reference,\n    private readonly index_: Index\n  ) {}\n\n  /**\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\n   * empty.\n   *\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  val(): unknown {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this.node_.val();\n  }\n\n  /**\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\n   * the entire node contents.\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  exportVal(): unknown {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this.node_.val(true);\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): unknown {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this.exportVal();\n  }\n\n  /**\n   * Returns whether the snapshot contains a non-null value.\n   *\n   * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\n   */\n  exists(): boolean {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return !this.node_.isEmpty();\n  }\n\n  /**\n   * Returns a DataSnapshot of the specified child node's contents.\n   *\n   * @param {!string} childPathString Path to a child.\n   * @return {!DataSnapshot} DataSnapshot for child node.\n   */\n  child(childPathString: string): DataSnapshot {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n    // Ensure the childPath is a string (can be a number)\n    childPathString = String(childPathString);\n    validatePathString('DataSnapshot.child', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    const childRef = this.ref_.child(childPath);\n    return new DataSnapshot(\n      this.node_.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n\n  /**\n   * Returns whether the snapshot contains a child at the specified path.\n   *\n   * @param {!string} childPathString Path to a child.\n   * @return {boolean} Whether the child exists.\n   */\n  hasChild(childPathString: string): boolean {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    return !this.node_.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns the priority of the object, or null if no priority was set.\n   *\n   * @return {string|number|null} The priority.\n   */\n  getPriority(): string | number | null {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this.node_.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * Iterates through child nodes and calls the specified action for each one.\n   *\n   * @param {function(!DataSnapshot)} action Callback function to be called\n   * for each child.\n   * @return {boolean} True if forEach was canceled by action returning true for\n   * one of the child nodes.\n   */\n  forEach(action: (d: DataSnapshot) => boolean | void): boolean {\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 1, action, false);\n\n    if (this.node_.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this.node_ as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this.index_, (key, node) => {\n      return action(\n        new DataSnapshot(node, this.ref_.child(key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns whether this DataSnapshot has children.\n   * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\n   */\n  hasChildren(): boolean {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n\n    if (this.node_.isLeafNode()) {\n      return false;\n    } else {\n      return !this.node_.isEmpty();\n    }\n  }\n\n  get key() {\n    return this.ref_.getKey();\n  }\n\n  /**\n   * Returns the number of children for this DataSnapshot.\n   * @return {number} The number of children that this DataSnapshot contains.\n   */\n  numChildren(): number {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n\n    return this.node_.numChildren();\n  }\n\n  /**\n   * @return {Reference} The Firebase reference for the location this snapshot's data came from.\n   */\n  getRef(): Reference {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n\n    return this.ref_;\n  }\n\n  get ref() {\n    return this.getRef();\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { EventRegistration } from './EventRegistration';\nimport { DataSnapshot } from '../../api/DataSnapshot';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  /**\n   * @return {!Path}\n   */\n  getPath(): Path;\n\n  /**\n   * @return {!string}\n   */\n  getEventType(): string;\n\n  /**\n   * @return {!function()}\n   */\n  getEventRunner(): () => void;\n\n  /**\n   * @return {!string}\n   */\n  toString(): string;\n}\n\nexport type EventType =\n  | 'value'\n  | ' child_added'\n  | ' child_changed'\n  | ' child_moved'\n  | ' child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n * @implements {Event}\n */\nexport class DataEvent implements Event {\n  /**\n   * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\n   * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\n   * @param {!DataSnapshot} snapshot The data backing the event\n   * @param {?string=} prevName Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: DataSnapshot,\n    public prevName?: string | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    const ref = this.snapshot.getRef();\n    if (this.eventType === 'value') {\n      return ref.path;\n    } else {\n      return ref.getParent().path;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return this.eventType;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  /**\n   * @param {EventRegistration} eventRegistration\n   * @param {Error} error\n   * @param {!Path} path\n   */\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    return this.path;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return 'cancel';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSnapshot } from '../../api/DataSnapshot';\nimport { DataEvent, CancelEvent, Event, EventType } from './Event';\nimport { contains, assert } from '@firebase/util';\n\nimport { Path } from '../util/Path';\nimport { Change } from './Change';\nimport { Query } from '../../api/Query';\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   * @param {!string} eventType\n   * @return {boolean}\n   */\n  respondsTo(eventType: string): boolean;\n\n  /**\n   * @param {!Change} change\n   * @param {!Query} query\n   * @return {!Event}\n   */\n  createEvent(change: Change, query: Query): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   * @param {!Event} eventData\n   * @return {function()}\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  /**\n   * @param {!Error} error\n   * @param {!Path} path\n   * @return {?CancelEvent}\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  /**\n   * @param {!EventRegistration} other\n   * @return {boolean}\n   */\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   * @return {boolean}\n   */\n  hasAnyCallback(): boolean;\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  /**\n   * @param {?function(!DataSnapshot)} callback_\n   * @param {?function(Error)} cancelCallback_\n   * @param {?Object} context_\n   */\n  constructor(\n    private callback_: ((d: DataSnapshot) => void) | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_: {} | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(change.snapshotNode, query.getRef(), index)\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callback_;\n      return function () {\n        cb.call(ctx, (eventData as DataEvent).snapshot);\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callback_ || !this.callback_) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return (\n        other.callback_ === this.callback_ && other.context_ === this.context_\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callback_ !== null;\n  }\n}\n\n/**\n * Represents the registration of 1 or more child_xxx events.\n *\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\n * register a group of callbacks together in the future.\n *\n * @constructor\n * @implements {EventRegistration}\n */\nexport class ChildEventRegistration implements EventRegistration {\n  /**\n   * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\n   * @param {?function(Error)} cancelCallback_\n   * @param {Object=} context_\n   */\n  constructor(\n    private callbacks_: {\n      [k: string]: (d: DataSnapshot, s?: string | null) => void;\n    } | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_?: {}\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return contains(this.callbacks_, eventToCheck);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const ref = query.getRef().child(/** @type {!string} */ change.childName);\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, ref, index),\n      change.prevName\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callbacks_[(eventData as DataEvent).eventType];\n      return function () {\n        cb.call(\n          ctx,\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      if (!this.callbacks_ || !other.callbacks_) {\n        return true;\n      } else if (this.context_ === other.context_) {\n        const otherKeys = Object.keys(other.callbacks_);\n        const thisKeys = Object.keys(this.callbacks_);\n        const otherCount = otherKeys.length;\n        const thisCount = thisKeys.length;\n        if (otherCount === thisCount) {\n          // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\n          // If event types don't match, not a match\n          // If count is not 1, exact match across all\n\n          if (otherCount === 1) {\n            const otherKey = otherKeys[0];\n            const thisKey = thisKeys[0];\n            return (\n              thisKey === otherKey &&\n              (!other.callbacks_[otherKey] ||\n                !this.callbacks_[thisKey] ||\n                other.callbacks_[otherKey] === this.callbacks_[thisKey])\n            );\n          } else {\n            // Exact match on each key.\n            return thisKeys.every(\n              eventType =>\n                other.callbacks_[eventType] === this.callbacks_[eventType]\n            );\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callbacks_ !== null;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  errorPrefix,\n  validateArgCount,\n  validateCallback,\n  validateContextObject,\n  Deferred\n} from '@firebase/util';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { MIN_NAME, MAX_NAME, ObjectToUniqueKey } from '../core/util/util';\nimport { Path } from '../core/util/Path';\nimport {\n  isValidPriority,\n  validateEventType,\n  validatePathString,\n  validateFirebaseDataArg,\n  validateKey\n} from '../core/util/validation';\n\nimport {\n  ValueEventRegistration,\n  ChildEventRegistration,\n  EventRegistration\n} from '../core/view/EventRegistration';\n\nimport { Repo } from '../core/Repo';\nimport { QueryParams } from '../core/view/QueryParams';\nimport { Reference } from './Reference';\nimport { DataSnapshot } from './DataSnapshot';\n\nlet __referenceConstructor: new (repo: Repo, path: Path) => Query;\n\nexport interface SnapshotCallback {\n  (a: DataSnapshot, b?: string | null): unknown;\n}\n\n/**\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\n *\n * Since every Firebase reference is a query, Firebase inherits from this object.\n */\nexport class Query {\n  static set __referenceConstructor(val) {\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  constructor(\n    public repo: Repo,\n    public path: Path,\n    private queryParams_: QueryParams,\n    private orderByCalled_: boolean\n  ) {}\n\n  /**\n   * Validates start/end values for queries.\n   * @param {!QueryParams} params\n   * @private\n   */\n  private static validateQueryEndpoints_(params: QueryParams) {\n    let startNode = null;\n    let endNode = null;\n    if (params.hasStart()) {\n      startNode = params.getIndexStartValue();\n    }\n    if (params.hasEnd()) {\n      endNode = params.getIndexEndValue();\n    }\n\n    if (params.getIndex() === KEY_INDEX) {\n      const tooManyArgsError =\n        'Query: When ordering by key, you may only pass one argument to ' +\n        'startAt(), endAt(), or equalTo().';\n      const wrongArgTypeError =\n        'Query: When ordering by key, the argument passed to startAt(), endAt(),' +\n        'or equalTo() must be a string.';\n      if (params.hasStart()) {\n        const startName = params.getIndexStartName();\n        if (startName !== MIN_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof startNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n      if (params.hasEnd()) {\n        const endName = params.getIndexEndName();\n        if (endName !== MAX_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof endNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n    } else if (params.getIndex() === PRIORITY_INDEX) {\n      if (\n        (startNode != null && !isValidPriority(startNode)) ||\n        (endNode != null && !isValidPriority(endNode))\n      ) {\n        throw new Error(\n          'Query: When ordering by priority, the first argument passed to startAt(), ' +\n            'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).'\n        );\n      }\n    } else {\n      assert(\n        params.getIndex() instanceof PathIndex ||\n          params.getIndex() === VALUE_INDEX,\n        'unknown index type.'\n      );\n      if (\n        (startNode != null && typeof startNode === 'object') ||\n        (endNode != null && typeof endNode === 'object')\n      ) {\n        throw new Error(\n          'Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +\n            'an object.'\n        );\n      }\n    }\n  }\n\n  /**\n   * Validates that limit* has been called with the correct combination of parameters\n   * @param {!QueryParams} params\n   * @private\n   */\n  private static validateLimit_(params: QueryParams) {\n    if (\n      params.hasStart() &&\n      params.hasEnd() &&\n      params.hasLimit() &&\n      !params.hasAnchoredLimit()\n    ) {\n      throw new Error(\n        \"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\"\n      );\n    }\n  }\n\n  /**\n   * Validates that no other order by call has been made\n   * @param {!string} fnName\n   * @private\n   */\n  private validateNoPreviousOrderByCall_(fnName: string) {\n    if (this.orderByCalled_ === true) {\n      throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n    }\n  }\n\n  /**\n   * @return {!QueryParams}\n   */\n  getQueryParams(): QueryParams {\n    return this.queryParams_;\n  }\n\n  /**\n   * @return {!Reference}\n   */\n  getRef(): Reference {\n    validateArgCount('Query.ref', 0, 0, arguments.length);\n    // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\n    // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\n    // method gets called.\n    return new Query.__referenceConstructor(this.repo, this.path) as Reference;\n  }\n\n  /**\n   * @param {!string} eventType\n   * @param {!function(DataSnapshot, string=)} callback\n   * @param {(function(Error)|Object)=} cancelCallbackOrContext\n   * @param {Object=} context\n   * @return {!function(DataSnapshot, string=)}\n   */\n  on(\n    eventType: string,\n    callback: SnapshotCallback,\n    cancelCallbackOrContext?: ((a: Error) => unknown) | object | null,\n    context?: object | null\n  ): SnapshotCallback {\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateEventType('Query.on', 1, eventType, false);\n    validateCallback('Query.on', 2, callback, false);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.on',\n      cancelCallbackOrContext,\n      context\n    );\n\n    if (eventType === 'value') {\n      this.onValueEvent(callback, ret.cancel, ret.context);\n    } else {\n      const callbacks: { [k: string]: typeof callback } = {};\n      callbacks[eventType] = callback;\n      this.onChildEvent(callbacks, ret.cancel, ret.context);\n    }\n    return callback;\n  }\n\n  /**\n   * @param {!function(!DataSnapshot)} callback\n   * @param {?function(Error)} cancelCallback\n   * @param {?Object} context\n   * @protected\n   */\n  protected onValueEvent(\n    callback: (a: DataSnapshot) => void,\n    cancelCallback: ((a: Error) => void) | null,\n    context: object | null\n  ) {\n    const container = new ValueEventRegistration(\n      callback,\n      cancelCallback || null,\n      context || null\n    );\n    this.repo.addEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\n   * @param {?function(Error)} cancelCallback\n   * @param {?Object} context\n   * @protected\n   */\n  onChildEvent(\n    callbacks: { [k: string]: SnapshotCallback },\n    cancelCallback: ((a: Error) => unknown) | null,\n    context: object | null\n  ) {\n    const container = new ChildEventRegistration(\n      callbacks,\n      cancelCallback,\n      context\n    );\n    this.repo.addEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * @param {string=} eventType\n   * @param {(function(!DataSnapshot, ?string=))=} callback\n   * @param {Object=} context\n   */\n  off(\n    eventType?: string,\n    callback?: SnapshotCallback,\n    context?: object | null\n  ): void {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', 1, eventType, true);\n    validateCallback('Query.off', 2, callback, true);\n    validateContextObject('Query.off', 3, context, true);\n\n    let container: EventRegistration | null = null;\n    let callbacks: { [k: string]: typeof callback } | null = null;\n    if (eventType === 'value') {\n      const valueCallback = callback || null;\n      container = new ValueEventRegistration(\n        valueCallback,\n        null,\n        context || null\n      );\n    } else if (eventType) {\n      if (callback) {\n        callbacks = {};\n        callbacks[eventType] = callback;\n      }\n      container = new ChildEventRegistration(callbacks, null, context || null);\n    }\n    this.repo.removeEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * Attaches a listener, waits for the first event, and then removes the listener\n   * @param {!string} eventType\n   * @param {!function(!DataSnapshot, string=)} userCallback\n   * @param failureCallbackOrContext\n   * @param context\n   * @return {!firebase.Promise}\n   */\n  once(\n    eventType: string,\n    userCallback?: SnapshotCallback,\n    failureCallbackOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): Promise<DataSnapshot> {\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateEventType('Query.once', 1, eventType, false);\n    validateCallback('Query.once', 2, userCallback, true);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.once',\n      failureCallbackOrContext,\n      context\n    );\n\n    // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\n    // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\n    // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\n    // against the Promise specification.\n    let firstCall = true;\n    const deferred = new Deferred<DataSnapshot>();\n\n    // A dummy error handler in case a user wasn't expecting promises\n    deferred.promise.catch(() => {});\n\n    const onceCallback = (snapshot: DataSnapshot) => {\n      // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\n      // triggers multiple events (e.g. child_added or child_changed).\n      if (firstCall) {\n        firstCall = false;\n        this.off(eventType, onceCallback);\n\n        if (userCallback) {\n          userCallback.bind(ret.context)(snapshot);\n        }\n        deferred.resolve(snapshot);\n      }\n    };\n\n    this.on(\n      eventType,\n      onceCallback,\n      /*cancel=*/ err => {\n        this.off(eventType, onceCallback);\n\n        if (ret.cancel) {\n          ret.cancel.bind(ret.context)(err);\n        }\n        deferred.reject(err);\n      }\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Set a limit and anchor it to the start of the window.\n   * @param {!number} limit\n   * @return {!Query}\n   */\n  limitToFirst(limit: number): Query {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToFirst: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToFirst: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      this.queryParams_.limitToFirst(limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Set a limit and anchor it to the end of the window.\n   * @param {!number} limit\n   * @return {!Query}\n   */\n  limitToLast(limit: number): Query {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToLast: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToLast: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      this.queryParams_.limitToLast(limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Given a child path, return a new query ordered by the specified grandchild path.\n   * @param {!string} path\n   * @return {!Query}\n   */\n  orderByChild(path: string): Query {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    if (path === '$key') {\n      throw new Error(\n        'Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.'\n      );\n    } else if (path === '$priority') {\n      throw new Error(\n        'Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.'\n      );\n    } else if (path === '$value') {\n      throw new Error(\n        'Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.'\n      );\n    }\n    validatePathString('Query.orderByChild', 1, path, false);\n    this.validateNoPreviousOrderByCall_('Query.orderByChild');\n    const parsedPath = new Path(path);\n    if (parsedPath.isEmpty()) {\n      throw new Error(\n        'Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = this.queryParams_.orderBy(index);\n    Query.validateQueryEndpoints_(newParams);\n\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the KeyIndex\n   * @return {!Query}\n   */\n  orderByKey(): Query {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByKey');\n    const newParams = this.queryParams_.orderBy(KEY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the PriorityIndex\n   * @return {!Query}\n   */\n  orderByPriority(): Query {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByPriority');\n    const newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the ValueIndex\n   * @return {!Query}\n   */\n  orderByValue(): Query {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByValue');\n    const newParams = this.queryParams_.orderBy(VALUE_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * @param {number|string|boolean|null} value\n   * @param {?string=} name\n   * @return {!Query}\n   */\n  startAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\n    validateKey('Query.startAt', 2, name, true);\n\n    const newParams = this.queryParams_.startAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.startAt: Starting point was already set (by another call to startAt ' +\n          'or equalTo).'\n      );\n    }\n\n    // Calling with no params tells us to start at the beginning.\n    if (value === undefined) {\n      value = null;\n      name = null;\n    }\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  /**\n   * @param {number|string|boolean|null} value\n   * @param {?string=} name\n   * @return {!Query}\n   */\n  endAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\n    validateKey('Query.endAt', 2, name, true);\n\n    const newParams = this.queryParams_.endAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.endAt: Ending point was already set (by another call to endAt or ' +\n          'equalTo).'\n      );\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  /**\n   * Load the selection of children with exactly the specified value, and, optionally,\n   * the specified name.\n   * @param {number|string|boolean|null} value\n   * @param {string=} name\n   * @return {!Query}\n   */\n  equalTo(value: number | string | boolean | null, name?: string) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\n    validateKey('Query.equalTo', 2, name, true);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.equalTo: Starting point was already set (by another call to startAt or ' +\n          'equalTo).'\n      );\n    }\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.equalTo: Ending point was already set (by another call to endAt or ' +\n          'equalTo).'\n      );\n    }\n    return this.startAt(value, name).endAt(value, name);\n  }\n\n  /**\n   * @return {!string} URL for this location.\n   */\n  toString(): string {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n\n    return this.repo.toString() + this.path.toUrlEncodedString();\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n  toJSON() {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this.toString();\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   * @return {!Object}\n   */\n  queryObject(): object {\n    return this.queryParams_.getQueryObject();\n  }\n\n  /**\n   * @return {!string}\n   */\n  queryIdentifier(): string {\n    const obj = this.queryObject();\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\n   * @param {Query} other\n   * @return {boolean}\n   */\n  isEqual(other: Query): boolean {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n    if (!(other instanceof Query)) {\n      const error =\n        'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n\n    const sameRepo = this.repo === other.repo;\n    const samePath = this.path.equals(other.path);\n    const sameQueryIdentifier =\n      this.queryIdentifier() === other.queryIdentifier();\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  /**\n   * Helper used by .on and .once to extract the context and or cancel arguments.\n   * @param {!string} fnName The function name (on or once)\n   * @param {(function(Error)|Object)=} cancelOrContext\n   * @param {Object=} context\n   * @return {{cancel: ?function(Error), context: ?Object}}\n   * @private\n   */\n  private static getCancelAndContextArgs_(\n    fnName: string,\n    cancelOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): { cancel: ((a: Error) => void) | null; context: object | null } {\n    const ret: {\n      cancel: ((a: Error) => void) | null;\n      context: object | null;\n    } = { cancel: null, context: null };\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext as (a: Error) => void;\n      validateCallback(fnName, 3, ret.cancel, true);\n\n      ret.context = context;\n      validateContextObject(fnName, 4, ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext as (a: Error) => void;\n      } else {\n        throw new Error(\n          errorPrefix(fnName, 3, true) +\n            ' must either be a cancel callback or a context object.'\n        );\n      }\n    }\n    return ret;\n  }\n\n  get ref(): Reference {\n    return this.getRef();\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from './Path';\nimport { SparseSnapshotTree } from '../SparseSnapshotTree';\nimport { LeafNode } from '../snap/LeafNode';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { SyncTree } from '../SyncTree';\nimport { Indexable } from './misc';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = this.path_.child(childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return this.syncTree_.calcCompleteEventCache(this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n * @param {?Object} values\n * @return {!Object}\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n * @param {(Object|string|number|boolean)} value\n * @param {!Object} serverValues\n * @return {!(string|number|boolean)}\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param {!Path} path path to which write is relative\n * @param {!Node} node new data written at path\n * @param {!SyncTree} syncTree current data\n * @param {!Object} serverValues\n * @return {!SparseSnapshotTree}\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n * @param {!Node} node\n * @param {!Object} serverValues\n * @return {!Node}\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from './util/Path';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport class SparseSnapshotTree {\n  private value: Node | null = null;\n\n  private readonly children: Map<string, SparseSnapshotTree> = new Map();\n\n  /**\n   * Gets the node stored at the given path if one exists.\n   *\n   * @param path Path to look up snapshot for.\n   * @return The retrieved node, or null.\n   */\n  find(path: Path): Node | null {\n    if (this.value != null) {\n      return this.value.getChild(path);\n    } else if (!path.isEmpty() && this.children.size > 0) {\n      const childKey = path.getFront();\n      path = path.popFront();\n      if (this.children.has(childKey)) {\n        const childTree = this.children.get(childKey);\n        return childTree.find(path);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Stores the given node at the specified path. If there is already a node\n   * at a shallower path, it merges the new data into that snapshot node.\n   *\n   * @param path Path to look up snapshot for.\n   * @param data The new data, or null.\n   */\n  remember(path: Path, data: Node) {\n    if (path.isEmpty()) {\n      this.value = data;\n      this.children.clear();\n    } else if (this.value !== null) {\n      this.value = this.value.updateChild(path, data);\n    } else {\n      const childKey = path.getFront();\n      if (!this.children.has(childKey)) {\n        this.children.set(childKey, new SparseSnapshotTree());\n      }\n\n      const child = this.children.get(childKey);\n      path = path.popFront();\n      child.remember(path, data);\n    }\n  }\n\n  /**\n   * Purge the data at path from the cache.\n   *\n   * @param path Path to look up snapshot for.\n   * @return True if this node should now be removed.\n   */\n  forget(path: Path): boolean {\n    if (path.isEmpty()) {\n      this.value = null;\n      this.children.clear();\n      return true;\n    } else {\n      if (this.value !== null) {\n        if (this.value.isLeafNode()) {\n          // We're trying to forget a node that doesn't exist\n          return false;\n        } else {\n          const value = this.value;\n          this.value = null;\n\n          const self = this;\n          value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n            self.remember(new Path(key), tree);\n          });\n\n          return this.forget(path);\n        }\n      } else if (this.children.size > 0) {\n        const childKey = path.getFront();\n        path = path.popFront();\n        if (this.children.has(childKey)) {\n          const safeToRemove = this.children.get(childKey).forget(path);\n          if (safeToRemove) {\n            this.children.delete(childKey);\n          }\n        }\n\n        return this.children.size === 0;\n      } else {\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Recursively iterates through all of the stored tree and calls the\n   * callback on each one.\n   *\n   * @param prefixPath Path to look up node for.\n   * @param func The function to invoke for each tree.\n   */\n  forEachTree(prefixPath: Path, func: (a: Path, b: Node) => unknown) {\n    if (this.value !== null) {\n      func(prefixPath, this.value);\n    } else {\n      this.forEachChild((key, tree) => {\n        const path = new Path(prefixPath.toString() + '/' + key);\n        tree.forEachTree(path, func);\n      });\n    }\n  }\n\n  /**\n   * Iterates through each immediate child and triggers the callback.\n   *\n   * @param func The function to invoke for each child.\n   */\n  forEachChild(func: (a: string, b: SparseSnapshotTree) => void) {\n    this.children.forEach((tree, key) => {\n      func(key, tree);\n    });\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  /**\n   * @type {!OperationSource}\n   */\n  source: OperationSource;\n\n  /**\n   * @type {!OperationType}\n   */\n  type: OperationType;\n\n  /**\n   * @type {!Path}\n   */\n  path: Path;\n\n  /**\n   * @param {string} childName\n   * @return {?Operation}\n   */\n  operationForChild(childName: string): Operation | null;\n}\n\n/**\n * @param {boolean} fromUser\n * @param {boolean} fromServer\n * @param {?string} queryId\n * @param {boolean} tagged\n * @constructor\n */\nexport class OperationSource {\n  constructor(\n    public fromUser: boolean,\n    public fromServer: boolean,\n    public queryId: string | null,\n    public tagged: boolean\n  ) {\n    assert(!tagged || fromServer, 'Tagged queries must be from server.');\n  }\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static User = new OperationSource(\n    /*fromUser=*/ true,\n    false,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static Server = new OperationSource(\n    false,\n    /*fromServer=*/ true,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @param {string} queryId\n   * @return {!OperationSource}\n   */\n  static forServerTaggedQuery = function (queryId: string): OperationSource {\n    return new OperationSource(\n      false,\n      /*fromServer=*/ true,\n      queryId,\n      /*tagged=*/ true\n    );\n  };\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { ImmutableTree } from '../util/ImmutableTree';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = OperationSource.User;\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\n   * @param {!boolean} revert\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): AckUserWrite {\n    if (!this.path.isEmpty()) {\n      assert(\n        this.path.getFront() === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        this.path.popFront(),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(Path.Empty, childTree, this.revert);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap } from './SortedMap';\nimport { Path } from './Path';\nimport { stringCompare, each } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n * @const\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static Empty = new ImmutableTree<any>(null);\n\n  /**\n   * @template T\n   * @param {!Object.<string, !T>} obj\n   * @return {!ImmutableTree.<!T>}\n   */\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = ImmutableTree.Empty;\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  /**\n   * @template T\n   * @param {?T} value\n   * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\n   */\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\n   * on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param {!Path} relativePath The remainder of the path\n   * @param {function(T):boolean} predicate The predicate to satisfy to return a\n   *   node\n   * @return {?{path:!Path, value:!T}}\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: Path.Empty, value: this.value };\n    } else {\n      if (relativePath.isEmpty()) {\n        return null;\n      } else {\n        const front = relativePath.getFront();\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(\n            relativePath.popFront(),\n            predicate\n          );\n          if (childExistingPathAndValue != null) {\n            const fullPath = new Path(front).child(\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   * @param {!Path} relativePath\n   * @return {?{path: !Path, value: !T}}\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @param {!Path} relativePath\n   * @return {!ImmutableTree.<T>} The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return this;\n    } else {\n      const front = relativePath.getFront();\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(relativePath.popFront());\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param {!Path} relativePath Path to set value at.\n   * @param {?T} toSet Value to set.\n   * @return {!ImmutableTree.<T>} Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front) || ImmutableTree.Empty;\n      const newChild = child.set(relativePath.popFront(), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param {!Path} relativePath Path to value to remove.\n   * @return {!ImmutableTree.<T>} Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      if (this.children.isEmpty()) {\n        return ImmutableTree.Empty;\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(relativePath.popFront());\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return ImmutableTree.Empty;\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param {!Path} relativePath Path to get value for.\n   * @return {?T} Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (relativePath.isEmpty()) {\n      return this.value;\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(relativePath.popFront());\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param {!Path} relativePath Path to replace subtree for.\n   * @param {!ImmutableTree} newTree New tree.\n   * @return {!ImmutableTree} Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return newTree;\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front) || ImmutableTree.Empty;\n      const newChild = child.setTree(relativePath.popFront(), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   * @template V\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\n   * @return {V}\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(Path.Empty, fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   * @template V\n   * @param {!Path} pathSoFar\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\n   * @return {V}\n   * @private\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   * @template V\n   * @param {!Path} path\n   * @param {!function(!Path, !T):?V} f\n   * @return {?V}\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, Path.Empty, f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathToFollow.isEmpty()) {\n        return null;\n      } else {\n        const front = pathToFollow.getFront()!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathToFollow.popFront(),\n            pathSoFar.child(front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!function(!Path, !T)} f\n   * @returns {!ImmutableTree.<T>}\n   */\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, Path.Empty, f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathToFollow.isEmpty()) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathToFollow.getFront();\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathToFollow.popFront(),\n          currentRelativePath.child(front),\n          f\n        );\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param {function(!Path, !T)} f A function to be called with\n   *   the path from the root of the tree to a node, and the value at that node.\n   *   Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(Path.Empty, f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(currentRelativePath.child(childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  /**\n   *\n   * @param {function(string, !T)} f\n   */\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @constructor\n * @implements {Operation}\n */\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (this.path.isEmpty()) {\n      return new ListenComplete(this.source, Path.Empty);\n    } else {\n      return new ListenComplete(this.source, this.path.popFront());\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Path } from '../util/Path';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!Node} snap\n * @constructor\n * @implements {Operation}\n */\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (this.path.isEmpty()) {\n      return new Overwrite(\n        this.source,\n        Path.Empty,\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, this.path.popFront(), this.snap);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\nimport { Path } from '../util/Path';\nimport { assert } from '@firebase/util';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!ImmutableTree.<!Node>} children\n * @constructor\n * @implements {Operation}\n */\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): Operation {\n    if (this.path.isEmpty()) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, Path.Empty, childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, Path.Empty, childTree);\n      }\n    } else {\n      assert(\n        this.path.getFront() === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, this.path.popFront(), this.children);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  /**\n   * @param {!Node} node_\n   * @param {boolean} fullyInitialized_\n   * @param {boolean} filtered_\n   */\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   * @return {boolean}\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   * @return {boolean}\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {boolean}\n   */\n  isCompleteForPath(path: Path): boolean {\n    if (path.isEmpty()) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = path.getFront();\n    return this.isCompleteForChild(childKey);\n  }\n\n  /**\n   * @param {!string} key\n   * @return {boolean}\n   */\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  /**\n   * @return {!Node}\n   */\n  getNode(): Node {\n    return this.node_;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { Node } from '../snap/Node';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n *\n * @constructor\n */\nexport class ViewCache {\n  /**\n   *\n   * @param {!CacheNode} eventCache_\n   * @param {!CacheNode} serverCache_\n   */\n  constructor(\n    private readonly eventCache_: CacheNode,\n    private readonly serverCache_: CacheNode\n  ) {}\n\n  /**\n   * @const\n   * @type {ViewCache}\n   */\n  static Empty = new ViewCache(\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    ),\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    )\n  );\n\n  /**\n   * @param {!Node} eventSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateEventSnap(\n    eventSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      new CacheNode(eventSnap, complete, filtered),\n      this.serverCache_\n    );\n  }\n\n  /**\n   * @param {!Node} serverSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateServerSnap(\n    serverSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      this.eventCache_,\n      new CacheNode(serverSnap, complete, filtered)\n    );\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getEventCache(): CacheNode {\n    return this.eventCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteEventSnap(): Node | null {\n    return this.eventCache_.isFullyInitialized()\n      ? this.eventCache_.getNode()\n      : null;\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getServerCache(): CacheNode {\n    return this.serverCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteServerSnap(): Node | null {\n    return this.serverCache_.isFullyInitialized()\n      ? this.serverCache_.getNode()\n      : null;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n * @param {!string} type The event type\n * @param {!Node} snapshotNode The data\n * @param {string=} childName The name for this child, if it's a child event\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\n * @param {string=} prevName The name for the previous child, if applicable\n */\nexport class Change {\n  constructor(\n    public type: string,\n    public snapshotNode: Node,\n    public childName?: string,\n    public oldSnap?: Node,\n    public prevName?: string | null\n  ) {}\n\n  /**\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static valueChange(snapshot: Node): Change {\n    return new Change(Change.VALUE, snapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childAddedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childRemovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} newSnapshot\n   * @param {!Node} oldSnapshot\n   * @return {!Change}\n   */\n  static childChangedChange(\n    childKey: string,\n    newSnapshot: Node,\n    oldSnapshot: Node\n  ): Change {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childMovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  }\n\n  //event types\n  /** Event type for a child added */\n  static CHILD_ADDED = 'child_added';\n\n  /** Event type for a child removed */\n  static CHILD_REMOVED = 'child_removed';\n\n  /** Event type for a child changed */\n  static CHILD_CHANGED = 'child_changed';\n\n  /** Event type for a child moved */\n  static CHILD_MOVED = 'child_moved';\n\n  /** Event type for a value change */\n  static VALUE = 'value';\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Change } from '../Change';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { Node } from '../../snap/Node';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n *\n * @constructor\n * @implements {NodeFilter}\n * @param {!Index} index\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            Change.childRemovedChange(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(\n          Change.childAddedChange(key, newChild)\n        );\n      } else {\n        optChangeAccumulator.trackChildChange(\n          Change.childChangedChange(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              Change.childRemovedChange(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                Change.childChangedChange(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              Change.childAddedChange(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Change } from './Change';\nimport { assert, assertionError } from '@firebase/util';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === Change.CHILD_ADDED ||\n        type === Change.CHILD_CHANGED ||\n        type === Change.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (type === Change.CHILD_ADDED && oldType === Change.CHILD_REMOVED) {\n        this.changeMap.set(\n          childKey,\n          Change.childChangedChange(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === Change.CHILD_REMOVED &&\n        oldType === Change.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === Change.CHILD_REMOVED &&\n        oldType === Change.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childRemovedChange(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === Change.CHILD_CHANGED &&\n        oldType === Change.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childAddedChange(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === Change.CHILD_CHANGED &&\n        oldType === Change.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childChangedChange(\n            childKey,\n            change.snapshotNode,\n            oldChange.oldSnap\n          )\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './CacheNode';\nimport { NamedNode, Node } from '../snap/Node';\nimport { Index } from '../snap/indexes/Index';\nimport { WriteTreeRef } from '../WriteTree';\nimport { ViewCache } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  /**\n   * @param {!string} childKey\n   * @return {?Node}\n   */\n  getCompleteChild(childKey: string): Node | null;\n\n  /**\n   * @param {!Index} index\n   * @param {!NamedNode} child\n   * @param {boolean} reverse\n   * @return {?NamedNode}\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n *\n * @private\n * @constructor\n * @implements CompleteChildSource\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n * @const\n * @type {!CompleteChildSource}\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n *\n *\n * @implements CompleteChildSource\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  /**\n   * @param {!WriteTreeRef} writes_\n   * @param {!ViewCache} viewCache_\n   * @param {?Node} optCompleteServerCache_\n   */\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.getEventCache();\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.getServerCache();\n      return this.writes_.calcCompleteChild(childKey, serverNode);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : this.viewCache_.getCompleteServerSnap();\n    const nodes = this.writes_.calcIndexedSlice(\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport { Change } from './Change';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Path } from '../util/Path';\nimport {\n  WriteTreeCompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  CompleteChildSource\n} from './CompleteChildSource';\nimport { ViewCache } from './ViewCache';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { WriteTreeRef } from '../WriteTree';\nimport { Overwrite } from '../operation/Overwrite';\nimport { Merge } from '../operation/Merge';\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n */\nexport class ProcessorResult {\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Array.<!Change>} changes\n   */\n  constructor(\n    public readonly viewCache: ViewCache,\n    public readonly changes: Change[]\n  ) {}\n}\n\n/**\n * @constructor\n */\nexport class ViewProcessor {\n  /**\n   * @param {!NodeFilter} filter_\n   */\n  constructor(private readonly filter_: NodeFilter) {}\n\n  /**\n   * @param {!ViewCache} viewCache\n   */\n  assertIndexed(viewCache: ViewCache) {\n    assert(\n      viewCache.getEventCache().getNode().isIndexed(this.filter_.getIndex()),\n      'Event snap not indexed'\n    );\n    assert(\n      viewCache.getServerCache().getNode().isIndexed(this.filter_.getIndex()),\n      'Server snap not indexed'\n    );\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @return {!ProcessorResult}\n   */\n  applyOperation(\n    oldViewCache: ViewCache,\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null\n  ): ProcessorResult {\n    const accumulator = new ChildChangeAccumulator();\n    let newViewCache, filterServerNode;\n    if (operation.type === OperationType.OVERWRITE) {\n      const overwrite = operation as Overwrite;\n      if (overwrite.source.fromUser) {\n        newViewCache = this.applyUserOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(overwrite.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered  and the\n        // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n        // again\n        filterServerNode =\n          overwrite.source.tagged ||\n          (oldViewCache.getServerCache().isFiltered() &&\n            !overwrite.path.isEmpty());\n        newViewCache = this.applyServerOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.MERGE) {\n      const merge = operation as Merge;\n      if (merge.source.fromUser) {\n        newViewCache = this.applyUserMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(merge.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered\n        filterServerNode =\n          merge.source.tagged || oldViewCache.getServerCache().isFiltered();\n        newViewCache = this.applyServerMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.ACK_USER_WRITE) {\n      const ackUserWrite = operation as AckUserWrite;\n      if (!ackUserWrite.revert) {\n        newViewCache = this.ackUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          ackUserWrite.affectedTree,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        newViewCache = this.revertUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n      newViewCache = this.listenComplete_(\n        oldViewCache,\n        operation.path,\n        writesCache,\n        accumulator\n      );\n    } else {\n      throw assertionError('Unknown operation type: ' + operation.type);\n    }\n    const changes = accumulator.getChanges();\n    ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\n    return new ProcessorResult(newViewCache, changes);\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!ViewCache} newViewCache\n   * @param {!Array.<!Change>} accumulator\n   * @private\n   */\n  private static maybeAddValueEvent_(\n    oldViewCache: ViewCache,\n    newViewCache: ViewCache,\n    accumulator: Change[]\n  ) {\n    const eventSnap = newViewCache.getEventCache();\n    if (eventSnap.isFullyInitialized()) {\n      const isLeafOrEmpty =\n        eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n      const oldCompleteSnap = oldViewCache.getCompleteEventSnap();\n      if (\n        accumulator.length > 0 ||\n        !oldViewCache.getEventCache().isFullyInitialized() ||\n        (isLeafOrEmpty &&\n          !eventSnap.getNode().equals(/** @type {!Node} */ oldCompleteSnap)) ||\n        !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n      ) {\n        accumulator.push(\n          Change.valueChange(\n            /** @type {!Node} */ newViewCache.getCompleteEventSnap()\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} changePath\n   * @param {!WriteTreeRef} writesCache\n   * @param {!CompleteChildSource} source\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private generateEventCacheAfterServerEvent_(\n    viewCache: ViewCache,\n    changePath: Path,\n    writesCache: WriteTreeRef,\n    source: CompleteChildSource,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = viewCache.getEventCache();\n    if (writesCache.shadowingWrite(changePath) != null) {\n      // we have a shadowing write, ignore changes\n      return viewCache;\n    } else {\n      let newEventCache, serverNode;\n      if (changePath.isEmpty()) {\n        // TODO: figure out how this plays with \"sliding ack windows\"\n        assert(\n          viewCache.getServerCache().isFullyInitialized(),\n          'If change path is empty, we must have complete server data'\n        );\n        if (viewCache.getServerCache().isFiltered()) {\n          // We need to special case this, because we need to only apply writes to complete children, or\n          // we might end up raising events for incomplete children. If the server data is filtered deep\n          // writes cannot be guaranteed to be complete\n          const serverCache = viewCache.getCompleteServerSnap();\n          const completeChildren =\n            serverCache instanceof ChildrenNode\n              ? serverCache\n              : ChildrenNode.EMPTY_NODE;\n          const completeEventChildren = writesCache.calcCompleteEventChildren(\n            completeChildren\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeEventChildren,\n            accumulator\n          );\n        } else {\n          const completeNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeNode,\n            accumulator\n          );\n        }\n      } else {\n        const childKey = changePath.getFront();\n        if (childKey === '.priority') {\n          assert(\n            changePath.getLength() === 1,\n            \"Can't have a priority with additional path components\"\n          );\n          const oldEventNode = oldEventSnap.getNode();\n          serverNode = viewCache.getServerCache().getNode();\n          // we might have overwrites for this priority\n          const updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(\n            changePath,\n            oldEventNode,\n            serverNode\n          );\n          if (updatedPriority != null) {\n            newEventCache = this.filter_.updatePriority(\n              oldEventNode,\n              updatedPriority\n            );\n          } else {\n            // priority didn't change, keep old node\n            newEventCache = oldEventSnap.getNode();\n          }\n        } else {\n          const childChangePath = changePath.popFront();\n          // update child\n          let newEventChild;\n          if (oldEventSnap.isCompleteForChild(childKey)) {\n            serverNode = viewCache.getServerCache().getNode();\n            const eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n            if (eventChildUpdate != null) {\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey)\n                .updateChild(childChangePath, eventChildUpdate);\n            } else {\n              // Nothing changed, just keep the old child\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey);\n            }\n          } else {\n            newEventChild = writesCache.calcCompleteChild(\n              childKey,\n              viewCache.getServerCache()\n            );\n          }\n          if (newEventChild != null) {\n            newEventCache = this.filter_.updateChild(\n              oldEventSnap.getNode(),\n              childKey,\n              newEventChild,\n              childChangePath,\n              source,\n              accumulator\n            );\n          } else {\n            // no complete child available or no change\n            newEventCache = oldEventSnap.getNode();\n          }\n        }\n      }\n      return viewCache.updateEventSnap(\n        newEventCache,\n        oldEventSnap.isFullyInitialized() || changePath.isEmpty(),\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Path} changePath\n   * @param {!Node} changedSnap\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {boolean} filterServerNode\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  applyServerOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerSnap = oldViewCache.getServerCache();\n    let newServerCache;\n    const serverFilter = filterServerNode\n      ? this.filter_\n      : this.filter_.getIndexedFilter();\n    if (changePath.isEmpty()) {\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        changedSnap,\n        null\n      );\n    } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n      // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n      const newServerNode = oldServerSnap\n        .getNode()\n        .updateChild(changePath, changedSnap);\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        newServerNode,\n        null\n      );\n    } else {\n      const childKey = changePath.getFront();\n      if (\n        !oldServerSnap.isCompleteForPath(changePath) &&\n        changePath.getLength() > 1\n      ) {\n        // We don't update incomplete nodes with updates intended for other listeners\n        return oldViewCache;\n      }\n      const childChangePath = changePath.popFront();\n      const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n      const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n      if (childKey === '.priority') {\n        newServerCache = serverFilter.updatePriority(\n          oldServerSnap.getNode(),\n          newChildNode\n        );\n      } else {\n        newServerCache = serverFilter.updateChild(\n          oldServerSnap.getNode(),\n          childKey,\n          newChildNode,\n          childChangePath,\n          NO_COMPLETE_CHILD_SOURCE,\n          null\n        );\n      }\n    }\n    const newViewCache = oldViewCache.updateServerSnap(\n      newServerCache,\n      oldServerSnap.isFullyInitialized() || changePath.isEmpty(),\n      serverFilter.filtersNodes()\n    );\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      newViewCache,\n      completeCache\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      changePath,\n      writesCache,\n      source,\n      accumulator\n    );\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Path} changePath\n   * @param {!Node} changedSnap\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  applyUserOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = oldViewCache.getEventCache();\n    let newViewCache, newEventCache;\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      oldViewCache,\n      completeCache\n    );\n    if (changePath.isEmpty()) {\n      newEventCache = this.filter_.updateFullNode(\n        oldViewCache.getEventCache().getNode(),\n        changedSnap,\n        accumulator\n      );\n      newViewCache = oldViewCache.updateEventSnap(\n        newEventCache,\n        true,\n        this.filter_.filtersNodes()\n      );\n    } else {\n      const childKey = changePath.getFront();\n      if (childKey === '.priority') {\n        newEventCache = this.filter_.updatePriority(\n          oldViewCache.getEventCache().getNode(),\n          changedSnap\n        );\n        newViewCache = oldViewCache.updateEventSnap(\n          newEventCache,\n          oldEventSnap.isFullyInitialized(),\n          oldEventSnap.isFiltered()\n        );\n      } else {\n        const childChangePath = changePath.popFront();\n        const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n        let newChild;\n        if (childChangePath.isEmpty()) {\n          // Child overwrite, we can replace the child\n          newChild = changedSnap;\n        } else {\n          const childNode = source.getCompleteChild(childKey);\n          if (childNode != null) {\n            if (\n              childChangePath.getBack() === '.priority' &&\n              childNode.getChild(childChangePath.parent()).isEmpty()\n            ) {\n              // This is a priority update on an empty node. If this node exists on the server, the\n              // server will send down the priority in the update, so ignore for now\n              newChild = childNode;\n            } else {\n              newChild = childNode.updateChild(childChangePath, changedSnap);\n            }\n          } else {\n            // There is no complete child node available\n            newChild = ChildrenNode.EMPTY_NODE;\n          }\n        }\n        if (!oldChild.equals(newChild)) {\n          const newEventSnap = this.filter_.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n          newViewCache = oldViewCache.updateEventSnap(\n            newEventSnap,\n            oldEventSnap.isFullyInitialized(),\n            this.filter_.filtersNodes()\n          );\n        } else {\n          newViewCache = oldViewCache;\n        }\n      }\n    }\n    return newViewCache;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {string} childKey\n   * @return {boolean}\n   * @private\n   */\n  private static cacheHasChild_(\n    viewCache: ViewCache,\n    childKey: string\n  ): boolean {\n    return viewCache.getEventCache().isCompleteForChild(childKey);\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {ImmutableTree.<!Node>} changedChildren\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private applyUserMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = path.child(relativePath);\n      if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = path.child(relativePath);\n      if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  /**\n   * @param {!Node} node\n   * @param {ImmutableTree.<!Node>} merge\n   * @return {!Node}\n   * @private\n   */\n  private applyMerge_(node: Node, merge: ImmutableTree<Node>): Node {\n    merge.foreach((relativePath, childNode) => {\n      node = node.updateChild(relativePath, childNode);\n    });\n    return node;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!ImmutableTree.<!Node>} changedChildren\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache\n   * @param {boolean} filterServerNode\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private applyServerMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n    // wait for the complete data update coming soon.\n    if (\n      viewCache.getServerCache().getNode().isEmpty() &&\n      !viewCache.getServerCache().isFullyInitialized()\n    ) {\n      return viewCache;\n    }\n\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    let viewMergeTree;\n    if (path.isEmpty()) {\n      viewMergeTree = changedChildren;\n    } else {\n      viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\n    }\n    const serverNode = viewCache.getServerCache().getNode();\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n      if (serverNode.hasChild(childKey)) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n      const isUnknownDeepMerge =\n        !viewCache.getServerCache().isCompleteForChild(childKey) &&\n        childMergeTree.value == null;\n      if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childMergeTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} ackPath\n   * @param {!ImmutableTree<!boolean>} affectedTree\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private ackUserWrite_(\n    viewCache: ViewCache,\n    ackPath: Path,\n    affectedTree: ImmutableTree<boolean>,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    if (writesCache.shadowingWrite(ackPath) != null) {\n      return viewCache;\n    }\n\n    // Only filter server node if it is currently filtered\n    const filterServerNode = viewCache.getServerCache().isFiltered();\n\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n    // now that it won't be shadowed.\n    const serverCache = viewCache.getServerCache();\n    if (affectedTree.value != null) {\n      // This is an overwrite.\n      if (\n        (ackPath.isEmpty() && serverCache.isFullyInitialized()) ||\n        serverCache.isCompleteForPath(ackPath)\n      ) {\n        return this.applyServerOverwrite_(\n          viewCache,\n          ackPath,\n          serverCache.getNode().getChild(ackPath),\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else if (ackPath.isEmpty()) {\n        // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n        // should just re-apply whatever we have in our cache as a merge.\n        let changedChildren = ImmutableTree.Empty;\n        serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n          changedChildren = changedChildren.set(new Path(name), node);\n        });\n        return this.applyServerMerge_(\n          viewCache,\n          ackPath,\n          changedChildren,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else {\n        return viewCache;\n      }\n    } else {\n      // This is a merge.\n      let changedChildren = ImmutableTree.Empty;\n      affectedTree.foreach((mergePath, value) => {\n        const serverCachePath = ackPath.child(mergePath);\n        if (serverCache.isCompleteForPath(serverCachePath)) {\n          changedChildren = changedChildren.set(\n            mergePath,\n            serverCache.getNode().getChild(serverCachePath)\n          );\n        }\n      });\n      return this.applyServerMerge_(\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!WriteTreeRef} writesCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private listenComplete_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerNode = viewCache.getServerCache();\n    const newViewCache = viewCache.updateServerSnap(\n      oldServerNode.getNode(),\n      oldServerNode.isFullyInitialized() || path.isEmpty(),\n      oldServerNode.isFiltered()\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      path,\n      writesCache,\n      NO_COMPLETE_CHILD_SOURCE,\n      accumulator\n    );\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private revertUserWrite_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    let complete;\n    if (writesCache.shadowingWrite(path) != null) {\n      return viewCache;\n    } else {\n      const source = new WriteTreeCompleteChildSource(\n        writesCache,\n        viewCache,\n        completeServerCache\n      );\n      const oldEventCache = viewCache.getEventCache().getNode();\n      let newEventCache;\n      if (path.isEmpty() || path.getFront() === '.priority') {\n        let newNode;\n        if (viewCache.getServerCache().isFullyInitialized()) {\n          newNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n        } else {\n          const serverChildren = viewCache.getServerCache().getNode();\n          assert(\n            serverChildren instanceof ChildrenNode,\n            'serverChildren would be complete if leaf node'\n          );\n          newNode = writesCache.calcCompleteEventChildren(\n            serverChildren as ChildrenNode\n          );\n        }\n        newNode = newNode as Node;\n        newEventCache = this.filter_.updateFullNode(\n          oldEventCache,\n          newNode,\n          accumulator\n        );\n      } else {\n        const childKey = path.getFront();\n        let newChild = writesCache.calcCompleteChild(\n          childKey,\n          viewCache.getServerCache()\n        );\n        if (\n          newChild == null &&\n          viewCache.getServerCache().isCompleteForChild(childKey)\n        ) {\n          newChild = oldEventCache.getImmediateChild(childKey);\n        }\n        if (newChild != null) {\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            newChild,\n            path.popFront(),\n            source,\n            accumulator\n          );\n        } else if (viewCache.getEventCache().getNode().hasChild(childKey)) {\n          // No complete child available, delete the existing one, if any\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            ChildrenNode.EMPTY_NODE,\n            path.popFront(),\n            source,\n            accumulator\n          );\n        } else {\n          newEventCache = oldEventCache;\n        }\n        if (\n          newEventCache.isEmpty() &&\n          viewCache.getServerCache().isFullyInitialized()\n        ) {\n          // We might have reverted all child writes. Maybe the old event was a leaf node\n          complete = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          if (complete.isLeafNode()) {\n            newEventCache = this.filter_.updateFullNode(\n              newEventCache,\n              complete,\n              accumulator\n            );\n          }\n        }\n      }\n      complete =\n        viewCache.getServerCache().isFullyInitialized() ||\n        writesCache.shadowingWrite(Path.Empty) != null;\n      return viewCache.updateEventSnap(\n        newEventCache,\n        complete,\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../snap/Node';\nimport { Change } from './Change';\nimport { assertionError } from '@firebase/util';\nimport { Query } from '../../api/Query';\nimport { Index } from '../snap/indexes/Index';\nimport { EventRegistration } from './EventRegistration';\nimport { Event } from './Event';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n * @constructor\n */\nexport class EventGenerator {\n  private index_: Index;\n\n  /**\n   *\n   * @param {!Query} query_\n   */\n  constructor(private query_: Query) {\n    /**\n     * @private\n     * @type {!Index}\n     */\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n\n  /**\n   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n   *\n   * Notes:\n   *  - child_moved events will be synthesized at this time for any child_changed events that affect\n   *    our index.\n   *  - prevName will be calculated based on the index ordering.\n   *\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {!Array.<!EventRegistration>} eventRegistrations\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistrations: EventRegistration[]\n  ): Event[] {\n    const events: Event[] = [];\n    const moves: Change[] = [];\n\n    changes.forEach(change => {\n      if (\n        change.type === Change.CHILD_CHANGED &&\n        this.index_.indexedValueChanged(\n          change.oldSnap as Node,\n          change.snapshotNode\n        )\n      ) {\n        moves.push(\n          Change.childMovedChange(\n            change.childName as string,\n            change.snapshotNode\n          )\n        );\n      }\n    });\n\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_REMOVED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_ADDED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_MOVED,\n      moves,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_CHANGED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.VALUE,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n\n    return events;\n  }\n\n  /**\n   * Given changes of a single change type, generate the corresponding events.\n   *\n   * @param {!Array.<!Event>} events\n   * @param {!string} eventType\n   * @param {!Array.<!Change>} changes\n   * @param {!Array.<!EventRegistration>} registrations\n   * @param {!Node} eventCache\n   * @private\n   */\n  private generateEventsForType_(\n    events: Event[],\n    eventType: string,\n    changes: Change[],\n    registrations: EventRegistration[],\n    eventCache: Node\n  ) {\n    const filteredChanges = changes.filter(change => change.type === eventType);\n\n    filteredChanges.sort(this.compareChanges_.bind(this));\n    filteredChanges.forEach(change => {\n      const materializedChange = this.materializeSingleChange_(\n        change,\n        eventCache\n      );\n      registrations.forEach(registration => {\n        if (registration.respondsTo(change.type)) {\n          events.push(\n            registration.createEvent(materializedChange, this.query_)\n          );\n        }\n      });\n    });\n  }\n\n  /**\n   * @param {!Change} change\n   * @param {!Node} eventCache\n   * @return {!Change}\n   * @private\n   */\n  private materializeSingleChange_(change: Change, eventCache: Node): Change {\n    if (change.type === 'value' || change.type === 'child_removed') {\n      return change;\n    } else {\n      change.prevName = eventCache.getPredecessorChildName(\n        /** @type {!string} */\n        change.childName,\n        change.snapshotNode,\n        this.index_\n      );\n      return change;\n    }\n  }\n\n  /**\n   * @param {!Change} a\n   * @param {!Change} b\n   * @return {number}\n   * @private\n   */\n  private compareChanges_(a: Change, b: Change) {\n    if (a.childName == null || b.childName == null) {\n      throw assertionError('Should only compare child_ events.');\n    }\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return this.index_.compare(aWrapped, bWrapped);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { ViewProcessor } from './ViewProcessor';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { ViewCache } from './ViewCache';\nimport { EventGenerator } from './EventGenerator';\nimport { assert } from '@firebase/util';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Change } from './Change';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Query } from '../../api/Query';\nimport { EventRegistration } from './EventRegistration';\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\nimport { CancelEvent, Event } from './Event';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n * @constructor\n */\nexport class View {\n  private processor_: ViewProcessor;\n  private viewCache_: ViewCache;\n  private eventRegistrations_: EventRegistration[] = [];\n  private eventGenerator_: EventGenerator;\n\n  /**\n   *\n   * @param {!Query} query_\n   * @param {!ViewCache} initialViewCache\n   */\n  constructor(private query_: Query, initialViewCache: ViewCache) {\n    const params = this.query_.getQueryParams();\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = params.getNodeFilter();\n\n    /**\n     * @type {ViewProcessor}\n     * @private\n     */\n    this.processor_ = new ViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.getServerCache();\n    const initialEventCache = initialViewCache.getEventCache();\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    /**\n     * @type {!ViewCache}\n     * @private\n     */\n    this.viewCache_ = new ViewCache(newEventCache, newServerCache);\n\n    /**\n     * @type {!EventGenerator}\n     * @private\n     */\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  /**\n   * @return {!Query}\n   */\n  getQuery(): Query {\n    return this.query_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getServerCache(): Node | null {\n    return this.viewCache_.getServerCache().getNode();\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    const cache = this.viewCache_.getCompleteServerSnap();\n    if (cache) {\n      // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n      // we need to see if it contains the child we're interested in.\n      if (\n        this.query_.getQueryParams().loadsAllData() ||\n        (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())\n      ) {\n        return cache.getChild(path);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.eventRegistrations_.length === 0;\n  }\n\n  /**\n   * @param {!EventRegistration} eventRegistration\n   */\n  addEventRegistration(eventRegistration: EventRegistration) {\n    this.eventRegistrations_.push(eventRegistration);\n  }\n\n  /**\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    const cancelEvents: CancelEvent[] = [];\n    if (cancelError) {\n      assert(\n        eventRegistration == null,\n        'A cancel should cancel all event registrations.'\n      );\n      const path = this.query_.path;\n      this.eventRegistrations_.forEach(registration => {\n        cancelError /** @type {!Error} */ = cancelError;\n        const maybeEvent = registration.createCancelEvent(cancelError, path);\n        if (maybeEvent) {\n          cancelEvents.push(maybeEvent);\n        }\n      });\n    }\n\n    if (eventRegistration) {\n      let remaining = [];\n      for (let i = 0; i < this.eventRegistrations_.length; ++i) {\n        const existing = this.eventRegistrations_[i];\n        if (!existing.matches(eventRegistration)) {\n          remaining.push(existing);\n        } else if (eventRegistration.hasAnyCallback()) {\n          // We're removing just this one\n          remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n          break;\n        }\n      }\n      this.eventRegistrations_ = remaining;\n    } else {\n      this.eventRegistrations_ = [];\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Applies the given Operation, updates our cache, and returns the appropriate events.\n   *\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @return {!Array.<!Event>}\n   */\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null\n  ): Event[] {\n    if (\n      operation.type === OperationType.MERGE &&\n      operation.source.queryId !== null\n    ) {\n      assert(\n        this.viewCache_.getCompleteServerSnap(),\n        'We should always have a full cache before handling merges'\n      );\n      assert(\n        this.viewCache_.getCompleteEventSnap(),\n        'Missing event cache, even though we have a server cache'\n      );\n    }\n\n    const oldViewCache = this.viewCache_;\n    const result = this.processor_.applyOperation(\n      oldViewCache,\n      operation,\n      writesCache,\n      completeServerCache\n    );\n    this.processor_.assertIndexed(result.viewCache);\n\n    assert(\n      result.viewCache.getServerCache().isFullyInitialized() ||\n        !oldViewCache.getServerCache().isFullyInitialized(),\n      'Once a server snap is complete, it should never go back'\n    );\n\n    this.viewCache_ = result.viewCache;\n\n    return this.generateEventsForChanges_(\n      result.changes,\n      result.viewCache.getEventCache().getNode(),\n      null\n    );\n  }\n\n  /**\n   * @param {!EventRegistration} registration\n   * @return {!Array.<!Event>}\n   */\n  getInitialEvents(registration: EventRegistration): Event[] {\n    const eventSnap = this.viewCache_.getEventCache();\n    const initialChanges: Change[] = [];\n    if (!eventSnap.getNode().isLeafNode()) {\n      const eventNode = eventSnap.getNode() as ChildrenNode;\n      eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        initialChanges.push(Change.childAddedChange(key, childNode));\n      });\n    }\n    if (eventSnap.isFullyInitialized()) {\n      initialChanges.push(Change.valueChange(eventSnap.getNode()));\n    }\n    return this.generateEventsForChanges_(\n      initialChanges,\n      eventSnap.getNode(),\n      registration\n    );\n  }\n\n  /**\n   * @private\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {EventRegistration=} eventRegistration\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges_(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistration?: EventRegistration\n  ): Event[] {\n    const registrations = eventRegistration\n      ? [eventRegistration]\n      : this.eventRegistrations_;\n    return this.eventGenerator_.generateEventsForChanges(\n      changes,\n      eventCache,\n      registrations\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './view/CacheNode';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { assert } from '@firebase/util';\nimport { ViewCache } from './view/ViewCache';\nimport { View } from './view/View';\nimport { Operation } from './operation/Operation';\nimport { WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { Event } from './view/Event';\nimport { Reference, ReferenceConstructor } from '../api/Reference';\n\nlet __referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  static set __referenceConstructor(val: ReferenceConstructor) {\n    assert(\n      !__referenceConstructor,\n      '__referenceConstructor has already been defined'\n    );\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  private readonly views: Map<string, View> = new Map();\n\n  isEmpty(): boolean {\n    return this.views.size === 0;\n  }\n\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    optCompleteServerCache: Node | null\n  ): Event[] {\n    const queryId = operation.source.queryId;\n    if (queryId !== null) {\n      const view = this.views.get(queryId);\n      assert(view != null, 'SyncTree gave us an op for an invalid query.');\n      return view.applyOperation(\n        operation,\n        writesCache,\n        optCompleteServerCache\n      );\n    } else {\n      let events: Event[] = [];\n\n      for (const view of this.views.values()) {\n        events = events.concat(\n          view.applyOperation(operation, writesCache, optCompleteServerCache)\n        );\n      }\n\n      return events;\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @param {!Query} query\n   * @param {!EventRegistration} eventRegistration\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache Complete server cache, if we have it.\n   * @param {boolean} serverCacheComplete\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    serverCacheComplete: boolean\n  ): Event[] {\n    const queryId = query.queryIdentifier();\n    let view = this.views.get(queryId);\n    if (!view) {\n      // TODO: make writesCache take flag for complete server node\n      let eventCache = writesCache.calcCompleteEventCache(\n        serverCacheComplete ? serverCache : null\n      );\n      let eventCacheComplete = false;\n      if (eventCache) {\n        eventCacheComplete = true;\n      } else if (serverCache instanceof ChildrenNode) {\n        eventCache = writesCache.calcCompleteEventChildren(serverCache);\n        eventCacheComplete = false;\n      } else {\n        eventCache = ChildrenNode.EMPTY_NODE;\n        eventCacheComplete = false;\n      }\n      const viewCache = new ViewCache(\n        new CacheNode(\n          /** @type {!Node} */ eventCache,\n          eventCacheComplete,\n          false\n        ),\n        new CacheNode(\n          /** @type {!Node} */ serverCache,\n          serverCacheComplete,\n          false\n        )\n      );\n      view = new View(query, viewCache);\n      this.views.set(queryId, view);\n    }\n\n    // This is guaranteed to exist now, we just created anything that was missing\n    view.addEventRegistration(eventRegistration);\n    return view.getInitialEvents(eventRegistration);\n  }\n\n  /**\n   * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n   *\n   * If query is the default query, we'll check all views for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n   *\n   * @param {!Query} query\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): { removed: Query[]; events: Event[] } {\n    const queryId = query.queryIdentifier();\n    const removed: Query[] = [];\n    let cancelEvents: Event[] = [];\n    const hadCompleteView = this.hasCompleteView();\n    if (queryId === 'default') {\n      // When you do ref.off(...), we search all views for the registration to remove.\n      for (const [viewQueryId, view] of this.views.entries()) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          this.views.delete(viewQueryId);\n\n          // We'll deal with complete views later.\n          if (!view.getQuery().getQueryParams().loadsAllData()) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    } else {\n      // remove the callback from the specific view.\n      const view = this.views.get(queryId);\n      if (view) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          this.views.delete(queryId);\n\n          // We'll deal with complete views later.\n          if (!view.getQuery().getQueryParams().loadsAllData()) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    }\n\n    if (hadCompleteView && !this.hasCompleteView()) {\n      // We removed our last complete view.\n      removed.push(\n        new SyncPoint.__referenceConstructor(query.repo, query.path)\n      );\n    }\n\n    return { removed, events: cancelEvents };\n  }\n\n  getQueryViews(): View[] {\n    const result = [];\n    for (const view of this.views.values()) {\n      if (!view.getQuery().getQueryParams().loadsAllData()) {\n        result.push(view);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @param path The path to the desired complete snapshot\n   * @return A complete cache, if it exists\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    let serverCache: Node | null = null;\n    for (const view of this.views.values()) {\n      serverCache = serverCache || view.getCompleteServerCache(path);\n    }\n    return serverCache;\n  }\n\n  viewForQuery(query: Query): View | null {\n    const params = query.getQueryParams();\n    if (params.loadsAllData()) {\n      return this.getCompleteView();\n    } else {\n      const queryId = query.queryIdentifier();\n      return this.views.get(queryId);\n    }\n  }\n\n  viewExistsForQuery(query: Query): boolean {\n    return this.viewForQuery(query) != null;\n  }\n\n  hasCompleteView(): boolean {\n    return this.getCompleteView() != null;\n  }\n\n  getCompleteView(): View | null {\n    for (const view of this.views.values()) {\n      if (view.getQuery().getQueryParams().loadsAllData()) {\n        return view;\n      }\n    }\n    return null;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { Path } from './util/Path';\nimport { Node, NamedNode } from './snap/Node';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { assert } from '@firebase/util';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(private writeTree_: ImmutableTree<Node>) {}\n\n  static Empty = new CompoundWrite(new ImmutableTree(null));\n\n  addWrite(path: Path, node: Node): CompoundWrite {\n    if (path.isEmpty()) {\n      return new CompoundWrite(new ImmutableTree(node));\n    } else {\n      const rootmost = this.writeTree_.findRootMostValueAndPath(path);\n      if (rootmost != null) {\n        const rootMostPath = rootmost.path;\n        let value = rootmost.value;\n        const relativePath = Path.relativePath(rootMostPath, path);\n        value = value.updateChild(relativePath, node);\n        return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\n      } else {\n        const subtree = new ImmutableTree(node);\n        const newWriteTree = this.writeTree_.setTree(path, subtree);\n        return new CompoundWrite(newWriteTree);\n      }\n    }\n  }\n\n  addWrites(path: Path, updates: { [name: string]: Node }): CompoundWrite {\n    let newWrite = this as CompoundWrite;\n    each(updates, (childKey: string, node: Node) => {\n      newWrite = newWrite.addWrite(path.child(childKey), node);\n    });\n    return newWrite;\n  }\n\n  /**\n   * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n   * location, which must be removed by calling this method with that path.\n   *\n   * @param path The path at which a write and all deeper writes should be removed\n   * @return {!CompoundWrite} The new CompoundWrite with the removed path\n   */\n  removeWrite(path: Path): CompoundWrite {\n    if (path.isEmpty()) {\n      return CompoundWrite.Empty;\n    } else {\n      const newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n\n  /**\n   * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n   * considered \"complete\".\n   *\n   * @param path The path to check for\n   * @return Whether there is a complete write at that path\n   */\n  hasCompleteWrite(path: Path): boolean {\n    return this.getCompleteNode(path) != null;\n  }\n\n  /**\n   * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n   * writes from deeper paths, but will return child nodes from a more shallow path.\n   *\n   * @param path The path to get a complete write\n   * @return The node if complete at that path, or null otherwise.\n   */\n  getCompleteNode(path: Path): Node | null {\n    const rootmost = this.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      return this.writeTree_\n        .get(rootmost.path)\n        .getChild(Path.relativePath(rootmost.path, path));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Returns all children that are guaranteed to be a complete overwrite.\n   *\n   * @return A list of all complete children.\n   */\n  getCompleteChildren(): NamedNode[] {\n    const children: NamedNode[] = [];\n    const node = this.writeTree_.value;\n    if (node != null) {\n      // If it's a leaf node, it has no children; so nothing to do.\n      if (!node.isLeafNode()) {\n        (node as ChildrenNode).forEachChild(\n          PRIORITY_INDEX,\n          (childName, childNode) => {\n            children.push(new NamedNode(childName, childNode));\n          }\n        );\n      }\n    } else {\n      this.writeTree_.children.inorderTraversal((childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      });\n    }\n    return children;\n  }\n\n  childCompoundWrite(path: Path): CompoundWrite {\n    if (path.isEmpty()) {\n      return this;\n    } else {\n      const shadowingNode = this.getCompleteNode(path);\n      if (shadowingNode != null) {\n        return new CompoundWrite(new ImmutableTree(shadowingNode));\n      } else {\n        return new CompoundWrite(this.writeTree_.subtree(path));\n      }\n    }\n  }\n\n  /**\n   * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n   * @return Whether this CompoundWrite is empty\n   */\n  isEmpty(): boolean {\n    return this.writeTree_.isEmpty();\n  }\n\n  /**\n   * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n   * node\n   * @param node The node to apply this CompoundWrite to\n   * @return The node with all writes applied\n   */\n  apply(node: Node): Node {\n    return applySubtreeWrite(Path.Empty, this.writeTree_, node);\n  }\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(relativePath.child(childKey), childTree, node);\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(relativePath.child('.priority'), priorityWrite);\n    }\n    return node;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { safeGet, assert, assertionError } from '@firebase/util';\n\nimport { Path } from './util/Path';\nimport { CompoundWrite } from './CompoundWrite';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { NamedNode, Node } from './snap/Node';\nimport { CacheNode } from './view/CacheNode';\nimport { Index } from './snap/indexes/Index';\nimport { each } from './util/util';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n *\n * @constructor\n */\nexport class WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   *\n   * @type {!CompoundWrite}\n   * @private\n   */\n  private visibleWrites_: CompoundWrite = CompoundWrite.Empty;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   *\n   * @type {!Array.<!WriteRecord>}\n   * @private\n   */\n  private allWrites_: WriteRecord[] = [];\n\n  private lastWriteId_ = -1;\n\n  /**\n   * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n   *\n   * @param {!Path} path\n   * @return {!WriteTreeRef}\n   */\n  childWrites(path: Path): WriteTreeRef {\n    return new WriteTreeRef(path, this);\n  }\n\n  /**\n   * Record a new overwrite from user code.\n   *\n   * @param {!Path} path\n   * @param {!Node} snap\n   * @param {!number} writeId\n   * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\n   */\n  addOverwrite(path: Path, snap: Node, writeId: number, visible?: boolean) {\n    assert(\n      writeId > this.lastWriteId_,\n      'Stacking an older write on top of newer ones'\n    );\n    if (visible === undefined) {\n      visible = true;\n    }\n    this.allWrites_.push({\n      path,\n      snap,\n      writeId,\n      visible\n    });\n\n    if (visible) {\n      this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\n    }\n    this.lastWriteId_ = writeId;\n  }\n\n  /**\n   * Record a new merge from user code.\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @param {!number} writeId\n   */\n  addMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ) {\n    assert(\n      writeId > this.lastWriteId_,\n      'Stacking an older merge on top of newer ones'\n    );\n    this.allWrites_.push({\n      path,\n      children: changedChildren,\n      writeId,\n      visible: true\n    });\n\n    this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\n    this.lastWriteId_ = writeId;\n  }\n\n  /**\n   * @param {!number} writeId\n   * @return {?WriteRecord}\n   */\n  getWrite(writeId: number): WriteRecord | null {\n    for (let i = 0; i < this.allWrites_.length; i++) {\n      const record = this.allWrites_[i];\n      if (record.writeId === writeId) {\n        return record;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n   * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n   *\n   * @param {!number} writeId\n   * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\n   * events as a result).\n   */\n  removeWrite(writeId: number): boolean {\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n    // out of order.\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n    const idx = this.allWrites_.findIndex(s => {\n      return s.writeId === writeId;\n    });\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n    const writeToRemove = this.allWrites_[idx];\n    this.allWrites_.splice(idx, 1);\n\n    let removedWriteWasVisible = writeToRemove.visible;\n    let removedWriteOverlapsWithOtherWrites = false;\n\n    let i = this.allWrites_.length - 1;\n\n    while (removedWriteWasVisible && i >= 0) {\n      const currentWrite = this.allWrites_[i];\n      if (currentWrite.visible) {\n        if (\n          i >= idx &&\n          this.recordContainsPath_(currentWrite, writeToRemove.path)\n        ) {\n          // The removed write was completely shadowed by a subsequent write.\n          removedWriteWasVisible = false;\n        } else if (writeToRemove.path.contains(currentWrite.path)) {\n          // Either we're covering some writes or they're covering part of us (depending on which came first).\n          removedWriteOverlapsWithOtherWrites = true;\n        }\n      }\n      i--;\n    }\n\n    if (!removedWriteWasVisible) {\n      return false;\n    } else if (removedWriteOverlapsWithOtherWrites) {\n      // There's some shadowing going on. Just rebuild the visible writes from scratch.\n      this.resetTree_();\n      return true;\n    } else {\n      // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n      if (writeToRemove.snap) {\n        this.visibleWrites_ = this.visibleWrites_.removeWrite(\n          writeToRemove.path\n        );\n      } else {\n        const children = writeToRemove.children;\n        each(children, (childName: string) => {\n          this.visibleWrites_ = this.visibleWrites_.removeWrite(\n            writeToRemove.path.child(childName)\n          );\n        });\n      }\n      return true;\n    }\n  }\n\n  /**\n   * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n   * No server data is considered.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteWriteData(path: Path): Node | null {\n    return this.visibleWrites_.getCompleteNode(path);\n  }\n\n  /**\n   * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n   * writes), attempt to calculate a complete snapshot for the given path\n   *\n   * @param {!Path} treePath\n   * @param {?Node} completeServerCache\n   * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    treePath: Path,\n    completeServerCache: Node | null,\n    writeIdsToExclude?: number[],\n    includeHiddenWrites?: boolean\n  ): Node | null {\n    if (!writeIdsToExclude && !includeHiddenWrites) {\n      const shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\n      if (shadowingNode != null) {\n        return shadowingNode;\n      } else {\n        const subMerge = this.visibleWrites_.childCompoundWrite(treePath);\n        if (subMerge.isEmpty()) {\n          return completeServerCache;\n        } else if (\n          completeServerCache == null &&\n          !subMerge.hasCompleteWrite(Path.Empty)\n        ) {\n          // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n          return null;\n        } else {\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return subMerge.apply(layeredCache);\n        }\n      }\n    } else {\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      if (!includeHiddenWrites && merge.isEmpty()) {\n        return completeServerCache;\n      } else {\n        // If the server cache is null, and we don't have a complete cache, we need to return null\n        if (\n          !includeHiddenWrites &&\n          completeServerCache == null &&\n          !merge.hasCompleteWrite(Path.Empty)\n        ) {\n          return null;\n        } else {\n          const filter = function (write: WriteRecord) {\n            return (\n              (write.visible || includeHiddenWrites) &&\n              (!writeIdsToExclude ||\n                !~writeIdsToExclude.indexOf(write.writeId)) &&\n              (write.path.contains(treePath) || treePath.contains(write.path))\n            );\n          };\n          const mergeAtPath = WriteTree.layerTree_(\n            this.allWrites_,\n            filter,\n            treePath\n          );\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return mergeAtPath.apply(layeredCache);\n        }\n      }\n    }\n  }\n\n  /**\n   * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n   * Used when creating new views, to pre-fill their complete event children snapshot.\n   *\n   * @param {!Path} treePath\n   * @param {?ChildrenNode} completeServerChildren\n   * @return {!ChildrenNode}\n   */\n  calcCompleteEventChildren(\n    treePath: Path,\n    completeServerChildren: ChildrenNode | null\n  ) {\n    let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n    const topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\n    if (topLevelSet) {\n      if (!topLevelSet.isLeafNode()) {\n        // we're shadowing everything. Return the children.\n        topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n          completeChildren = completeChildren.updateImmediateChild(\n            childName,\n            childSnap\n          );\n        });\n      }\n      return completeChildren;\n    } else if (completeServerChildren) {\n      // Layer any children we have on top of this\n      // We know we don't have a top-level set, so just enumerate existing children\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      completeServerChildren.forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          const node = merge\n            .childCompoundWrite(new Path(childName))\n            .apply(childNode);\n          completeChildren = completeChildren.updateImmediateChild(\n            childName,\n            node\n          );\n        }\n      );\n      // Add any complete children we have from the set\n      merge.getCompleteChildren().forEach(namedNode => {\n        completeChildren = completeChildren.updateImmediateChild(\n          namedNode.name,\n          namedNode.node\n        );\n      });\n      return completeChildren;\n    } else {\n      // We don't have anything to layer on top of. Layer on any children we have\n      // Note that we can return an empty snap if we have a defined delete\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      merge.getCompleteChildren().forEach(namedNode => {\n        completeChildren = completeChildren.updateImmediateChild(\n          namedNode.name,\n          namedNode.node\n        );\n      });\n      return completeChildren;\n    }\n  }\n\n  /**\n   * Given that the underlying server data has updated, determine what, if anything, needs to be\n   * applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events\n   *\n   * Either existingEventSnap or existingServerSnap must exist\n   *\n   * @param {!Path} treePath\n   * @param {!Path} childPath\n   * @param {?Node} existingEventSnap\n   * @param {?Node} existingServerSnap\n   * @return {?Node}\n   */\n  calcEventCacheAfterServerOverwrite(\n    treePath: Path,\n    childPath: Path,\n    existingEventSnap: Node | null,\n    existingServerSnap: Node | null\n  ): Node | null {\n    assert(\n      existingEventSnap || existingServerSnap,\n      'Either existingEventSnap or existingServerSnap must exist'\n    );\n    const path = treePath.child(childPath);\n    if (this.visibleWrites_.hasCompleteWrite(path)) {\n      // At this point we can probably guarantee that we're in case 2, meaning no events\n      // May need to check visibility while doing the findRootMostValueAndPath call\n      return null;\n    } else {\n      // No complete shadowing. We're either partially shadowing or not shadowing at all.\n      const childMerge = this.visibleWrites_.childCompoundWrite(path);\n      if (childMerge.isEmpty()) {\n        // We're not shadowing at all. Case 1\n        return existingServerSnap.getChild(childPath);\n      } else {\n        // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n        // However this is tricky to find out, since user updates don't necessary change the server\n        // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n        // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n        // only check if the updates change the serverNode.\n        // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n        return childMerge.apply(existingServerSnap.getChild(childPath));\n      }\n    }\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   *\n   * @param {!Path} treePath\n   * @param {!string} childKey\n   * @param {!CacheNode} existingServerSnap\n   * @return {?Node}\n   */\n  calcCompleteChild(\n    treePath: Path,\n    childKey: string,\n    existingServerSnap: CacheNode\n  ): Node | null {\n    const path = treePath.child(childKey);\n    const shadowingNode = this.visibleWrites_.getCompleteNode(path);\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      if (existingServerSnap.isCompleteForChild(childKey)) {\n        const childMerge = this.visibleWrites_.childCompoundWrite(path);\n        return childMerge.apply(\n          existingServerSnap.getNode().getImmediateChild(childKey)\n        );\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.visibleWrites_.getCompleteNode(path);\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window.\n   */\n  calcIndexedSlice(\n    treePath: Path,\n    completeServerData: Node | null,\n    startPost: NamedNode,\n    count: number,\n    reverse: boolean,\n    index: Index\n  ): NamedNode[] {\n    let toIterate: Node;\n    const merge = this.visibleWrites_.childCompoundWrite(treePath);\n    const shadowingNode = merge.getCompleteNode(Path.Empty);\n    if (shadowingNode != null) {\n      toIterate = shadowingNode;\n    } else if (completeServerData != null) {\n      toIterate = merge.apply(completeServerData);\n    } else {\n      // no children to iterate on\n      return [];\n    }\n    toIterate = toIterate.withIndex(index);\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n      const nodes = [];\n      const cmp = index.getCompare();\n      const iter = reverse\n        ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n        : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n      let next = iter.getNext();\n      while (next && nodes.length < count) {\n        if (cmp(next, startPost) !== 0) {\n          nodes.push(next);\n        }\n        next = iter.getNext();\n      }\n      return nodes;\n    } else {\n      return [];\n    }\n  }\n\n  private recordContainsPath_(writeRecord: WriteRecord, path: Path): boolean {\n    if (writeRecord.snap) {\n      return writeRecord.path.contains(path);\n    } else {\n      for (const childName in writeRecord.children) {\n        if (\n          writeRecord.children.hasOwnProperty(childName) &&\n          writeRecord.path.child(childName).contains(path)\n        ) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n   */\n  private resetTree_() {\n    this.visibleWrites_ = WriteTree.layerTree_(\n      this.allWrites_,\n      WriteTree.DefaultFilter_,\n      Path.Empty\n    );\n    if (this.allWrites_.length > 0) {\n      this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n    } else {\n      this.lastWriteId_ = -1;\n    }\n  }\n\n  /**\n   * The default filter used when constructing the tree. Keep everything that's visible.\n   */\n  private static DefaultFilter_(write: WriteRecord) {\n    return write.visible;\n  }\n\n  /**\n   * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n   * event data at that path.\n   */\n  private static layerTree_(\n    writes: WriteRecord[],\n    filter: (w: WriteRecord) => boolean,\n    treeRoot: Path\n  ): CompoundWrite {\n    let compoundWrite = CompoundWrite.Empty;\n    for (let i = 0; i < writes.length; ++i) {\n      const write = writes[i];\n      // Theory, a later set will either:\n      // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n      // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n      if (filter(write)) {\n        const writePath = write.path;\n        let relativePath;\n        if (write.snap) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            compoundWrite = compoundWrite.addWrite(\n              Path.Empty,\n              write.snap.getChild(relativePath)\n            );\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else if (write.children) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrites(\n              relativePath,\n              write.children\n            );\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            if (relativePath.isEmpty()) {\n              compoundWrite = compoundWrite.addWrites(\n                Path.Empty,\n                write.children\n              );\n            } else {\n              const child = safeGet(write.children, relativePath.getFront());\n              if (child) {\n                // There exists a child in this node that matches the root path\n                const deepNode = child.getChild(relativePath.popFront());\n                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\n              }\n            }\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else {\n          throw assertionError('WriteRecord should have .snap or .children');\n        }\n      }\n    }\n    return compoundWrite;\n  }\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n * @constructor\n */\nexport class WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   *\n   * @type {!Path}\n   * @private\n   * @const\n   */\n  private readonly treePath_: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   *\n   * @type {!WriteTree}\n   * @private\n   * @const\n   */\n  private readonly writeTree_: WriteTree;\n\n  /**\n   * @param {!Path} path\n   * @param {!WriteTree} writeTree\n   */\n  constructor(path: Path, writeTree: WriteTree) {\n    this.treePath_ = path;\n    this.writeTree_ = writeTree;\n  }\n\n  /**\n   * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n   * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n   * can lead to a more expensive calculation.\n   *\n   * @param {?Node} completeServerCache\n   * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    completeServerCache: Node | null,\n    writeIdsToExclude?: number[],\n    includeHiddenWrites?: boolean\n  ): Node | null {\n    return this.writeTree_.calcCompleteEventCache(\n      this.treePath_,\n      completeServerCache,\n      writeIdsToExclude,\n      includeHiddenWrites\n    );\n  }\n\n  /**\n   * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n   * mix of the given server data and write data.\n   *\n   * @param {?ChildrenNode} completeServerChildren\n   * @return {!ChildrenNode}\n   */\n  calcCompleteEventChildren(\n    completeServerChildren: ChildrenNode | null\n  ): ChildrenNode {\n    return this.writeTree_.calcCompleteEventChildren(\n      this.treePath_,\n      completeServerChildren\n    ) as ChildrenNode;\n  }\n\n  /**\n   * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n   * if anything, needs to be applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events should be raised\n   *\n   * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n   *\n   * @param {!Path} path\n   * @param {?Node} existingEventSnap\n   * @param {?Node} existingServerSnap\n   * @return {?Node}\n   */\n  calcEventCacheAfterServerOverwrite(\n    path: Path,\n    existingEventSnap: Node | null,\n    existingServerSnap: Node | null\n  ): Node | null {\n    return this.writeTree_.calcEventCacheAfterServerOverwrite(\n      this.treePath_,\n      path,\n      existingEventSnap,\n      existingServerSnap\n    );\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.writeTree_.shadowingWrite(this.treePath_.child(path));\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window\n   *\n   * @param {?Node} completeServerData\n   * @param {!NamedNode} startPost\n   * @param {!number} count\n   * @param {boolean} reverse\n   * @param {!Index} index\n   * @return {!Array.<!NamedNode>}\n   */\n  calcIndexedSlice(\n    completeServerData: Node | null,\n    startPost: NamedNode,\n    count: number,\n    reverse: boolean,\n    index: Index\n  ): NamedNode[] {\n    return this.writeTree_.calcIndexedSlice(\n      this.treePath_,\n      completeServerData,\n      startPost,\n      count,\n      reverse,\n      index\n    );\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   *\n   * @param {!string} childKey\n   * @param {!CacheNode} existingServerCache\n   * @return {?Node}\n   */\n  calcCompleteChild(\n    childKey: string,\n    existingServerCache: CacheNode\n  ): Node | null {\n    return this.writeTree_.calcCompleteChild(\n      this.treePath_,\n      childKey,\n      existingServerCache\n    );\n  }\n\n  /**\n   * Return a WriteTreeRef for a child.\n   *\n   * @param {string} childName\n   * @return {!WriteTreeRef}\n   */\n  child(childName: string): WriteTreeRef {\n    return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { errorForServerCode, each } from './util/util';\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport { Operation, OperationSource } from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { Path } from './util/Path';\nimport { SyncPoint } from './SyncPoint';\nimport { WriteTree, WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { Node } from './snap/Node';\nimport { Event } from './view/Event';\nimport { EventRegistration } from './view/EventRegistration';\nimport { View } from './view/View';\n\n/**\n * @typedef {{\n *   startListening: function(\n *     !Query,\n *     ?number,\n *     function():string,\n *     function(!string, *):!Array.<!Event>\n *   ):!Array.<!Event>,\n *\n *   stopListening: function(!Query, ?number)\n * }}\n */\nexport interface ListenProvider {\n  startListening(\n    query: Query,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: Query, b: number | null): void;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n * @constructor\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  private syncPointTree_: ImmutableTree<SyncPoint> = ImmutableTree.Empty;\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  private pendingWriteTree_ = new WriteTree();\n\n  private readonly tagToQueryMap: Map<number, string> = new Map();\n  private readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(private listenProvider_: ListenProvider) {}\n\n  /**\n   * Apply the data changes for a user-generated set() or transaction() call.\n   *\n   * @return Events to raise.\n   */\n  applyUserOverwrite(\n    path: Path,\n    newData: Node,\n    writeId: number,\n    visible?: boolean\n  ): Event[] {\n    // Record pending write.\n    this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n\n    if (!visible) {\n      return [];\n    } else {\n      return this.applyOperationToSyncPoints_(\n        new Overwrite(OperationSource.User, path, newData)\n      );\n    }\n  }\n\n  /**\n   * Apply the data from a user-generated update() call\n   *\n   * @return Events to raise.\n   */\n  applyUserMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ): Event[] {\n    // Record pending merge.\n    this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.User, path, changeTree)\n    );\n  }\n\n  /**\n   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n   *\n   * @param revert True if the given write failed and needs to be reverted\n   * @return Events to raise.\n   */\n  ackUserWrite(writeId: number, revert: boolean = false) {\n    const write = this.pendingWriteTree_.getWrite(writeId);\n    const needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n    if (!needToReevaluate) {\n      return [];\n    } else {\n      let affectedTree = ImmutableTree.Empty;\n      if (write.snap != null) {\n        // overwrite\n        affectedTree = affectedTree.set(Path.Empty, true);\n      } else {\n        each(write.children, (pathString: string, node: Node) => {\n          affectedTree = affectedTree.set(new Path(pathString), node);\n        });\n      }\n      return this.applyOperationToSyncPoints_(\n        new AckUserWrite(write.path, affectedTree, revert)\n      );\n    }\n  }\n\n  /**\n   * Apply new server data for the specified path..\n   *\n   * @return Events to raise.\n   */\n  applyServerOverwrite(path: Path, newData: Node): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new Overwrite(OperationSource.Server, path, newData)\n    );\n  }\n\n  /**\n   * Apply new server data to be merged in at the specified path.\n   *\n   * @return Events to raise.\n   */\n  applyServerMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node }\n  ): Event[] {\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.Server, path, changeTree)\n    );\n  }\n\n  /**\n   * Apply a listen complete for a query\n   *\n   * @return Events to raise.\n   */\n  applyListenComplete(path: Path): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new ListenComplete(OperationSource.Server, path)\n    );\n  }\n\n  /**\n   * Apply new server data for the specified tagged query.\n   *\n   * @return Events to raise.\n   */\n  applyTaggedQueryOverwrite(path: Path, snap: Node, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey != null) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new Overwrite(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        snap\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // Query must have been removed already\n      return [];\n    }\n  }\n\n  /**\n   * Apply server data to be merged in for the specified tagged query.\n   *\n   * @return Events to raise.\n   */\n  applyTaggedQueryMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    tag: number\n  ): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const changeTree = ImmutableTree.fromObject(changedChildren);\n      const op = new Merge(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        changeTree\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Apply a listen complete for a tagged query\n   *\n   * @return Events to raise.\n   */\n  applyTaggedListenComplete(path: Path, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new ListenComplete(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @return Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration\n  ): Event[] {\n    const path = query.path;\n\n    let serverCache: Node | null = null;\n    let foundAncestorDefaultView = false;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    this.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n      const relativePath = Path.relativePath(pathToSyncPoint, path);\n      serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || sp.hasCompleteView();\n    });\n    let syncPoint = this.syncPointTree_.get(path);\n    if (!syncPoint) {\n      syncPoint = new SyncPoint();\n      this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n    } else {\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || syncPoint.hasCompleteView();\n      serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let serverCacheComplete;\n    if (serverCache != null) {\n      serverCacheComplete = true;\n    } else {\n      serverCacheComplete = false;\n      serverCache = ChildrenNode.EMPTY_NODE;\n      const subtree = this.syncPointTree_.subtree(path);\n      subtree.foreachChild((childName, childSyncPoint) => {\n        const completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\n        if (completeCache) {\n          serverCache = serverCache.updateImmediateChild(\n            childName,\n            completeCache\n          );\n        }\n      });\n    }\n\n    const viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n    if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n      // We need to track a tag for this query\n      const queryKey = SyncTree.makeQueryKey_(query);\n      assert(\n        !this.queryToTagMap.has(queryKey),\n        'View does not exist, but we have a tag'\n      );\n      const tag = SyncTree.getNextQueryTag_();\n      this.queryToTagMap.set(queryKey, tag);\n      this.tagToQueryMap.set(tag, queryKey);\n    }\n    const writesCache = this.pendingWriteTree_.childWrites(path);\n    let events = syncPoint.addEventRegistration(\n      query,\n      eventRegistration,\n      writesCache,\n      serverCache,\n      serverCacheComplete\n    );\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\n      const view /** @type !View */ = syncPoint.viewForQuery(query);\n      events = events.concat(this.setupListener_(query, view));\n    }\n    return events;\n  }\n\n  /**\n   * Remove event callback(s).\n   *\n   * If query is the default query, we'll check all queries for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n   *\n   * @param eventRegistration If null, all callbacks are removed.\n   * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\n    const path = query.path;\n    const maybeSyncPoint = this.syncPointTree_.get(path);\n    let cancelEvents: Event[] = [];\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n    if (\n      maybeSyncPoint &&\n      (query.queryIdentifier() === 'default' ||\n        maybeSyncPoint.viewExistsForQuery(query))\n    ) {\n      /**\n       * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\n       */\n      const removedAndEvents = maybeSyncPoint.removeEventRegistration(\n        query,\n        eventRegistration,\n        cancelError\n      );\n      if (maybeSyncPoint.isEmpty()) {\n        this.syncPointTree_ = this.syncPointTree_.remove(path);\n      }\n      const removed = removedAndEvents.removed;\n      cancelEvents = removedAndEvents.events;\n      // We may have just removed one of many listeners and can short-circuit this whole process\n      // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n      // properly set up.\n      //\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query.getQueryParams().loadsAllData();\n        });\n      const covered = this.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) => {\n          return parentSyncPoint.hasCompleteView();\n        }\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = this.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = this.collectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.getQuery();\n            const listener = this.createListenerForView_(view);\n            this.listenProvider_.startListening(\n              SyncTree.queryForListening_(newQuery),\n              this.tagForQuery_(newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        } else {\n          // There's nothing below us, so nothing we need to start listening on\n        }\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          this.listenProvider_.stopListening(\n            SyncTree.queryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: Query) => {\n            const tagToRemove = this.queryToTagMap.get(\n              SyncTree.makeQueryKey_(queryToRemove)\n            );\n            this.listenProvider_.stopListening(\n              SyncTree.queryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n      // Now, clear all of the tags we're tracking for the removed listens\n      this.removeTags_(removed);\n    } else {\n      // No-op, this listener must've been already removed\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n   * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n   * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n   *     <incremented total> as the write is applied locally and then acknowledged at the server.\n   *\n   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n   *\n   * @param path The path to the data we want\n   * @param writeIdsToExclude A specific set to be excluded\n   */\n  calcCompleteEventCache(path: Path, writeIdsToExclude?: number[]): Node {\n    const includeHiddenSets = true;\n    const writeTree = this.pendingWriteTree_;\n    const serverCache = this.syncPointTree_.findOnPath(\n      path,\n      (pathSoFar, syncPoint) => {\n        const relativePath = Path.relativePath(pathSoFar, path);\n        const serverCache = syncPoint.getCompleteServerCache(relativePath);\n        if (serverCache) {\n          return serverCache;\n        }\n      }\n    );\n    return writeTree.calcCompleteEventCache(\n      path,\n      serverCache,\n      writeIdsToExclude,\n      includeHiddenSets\n    );\n  }\n\n  /**\n   * This collapses multiple unfiltered views into a single view, since we only need a single\n   * listener for them.\n   */\n  private collectDistinctViewsForSubTree_(\n    subtree: ImmutableTree<SyncPoint>\n  ): View[] {\n    return subtree.fold<View[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n          const completeView = maybeChildSyncPoint.getCompleteView();\n          return [completeView];\n        } else {\n          // No complete view here, flatten any deeper listens into an array\n          let views: View[] = [];\n          if (maybeChildSyncPoint) {\n            views = maybeChildSyncPoint.getQueryViews();\n          }\n          each(childMap, (_key: string, childViews: View[]) => {\n            views = views.concat(childViews);\n          });\n          return views;\n        }\n      }\n    );\n  }\n\n  private removeTags_(queries: Query[]) {\n    for (let j = 0; j < queries.length; ++j) {\n      const removedQuery = queries[j];\n      if (!removedQuery.getQueryParams().loadsAllData()) {\n        // We should have a tag for this\n        const removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n        const removedQueryTag = this.queryToTagMap.get(removedQueryKey);\n        this.queryToTagMap.delete(removedQueryKey);\n        this.tagToQueryMap.delete(removedQueryTag);\n      }\n    }\n  }\n\n  /**\n   * Normalizes a query to a query we send the server for listening\n   *\n   * @return The normalized query\n   */\n  private static queryForListening_(query: Query): Query {\n    if (\n      query.getQueryParams().loadsAllData() &&\n      !query.getQueryParams().isDefault()\n    ) {\n      // We treat queries that load all data as default queries\n      // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n      // from Query\n      return query.getRef()!;\n    } else {\n      return query;\n    }\n  }\n\n  /**\n   * For a given new listen, manage the de-duplication of outstanding subscriptions.\n   *\n   * @return This method can return events to support synchronous data sources\n   */\n  private setupListener_(query: Query, view: View): Event[] {\n    const path = query.path;\n    const tag = this.tagForQuery_(query);\n    const listener = this.createListenerForView_(view);\n\n    const events = this.listenProvider_.startListening(\n      SyncTree.queryForListening_(query),\n      tag,\n      listener.hashFn,\n      listener.onComplete\n    );\n\n    const subtree = this.syncPointTree_.subtree(path);\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n    if (tag) {\n      assert(\n        !subtree.value.hasCompleteView(),\n        \"If we're adding a query, it shouldn't be shadowed\"\n      );\n    } else {\n      // Shadow everything at or below this location, this is a default listener.\n      const queriesToStop = subtree.fold<Query[]>(\n        (relativePath, maybeChildSyncPoint, childMap) => {\n          if (\n            !relativePath.isEmpty() &&\n            maybeChildSyncPoint &&\n            maybeChildSyncPoint.hasCompleteView()\n          ) {\n            return [maybeChildSyncPoint.getCompleteView().getQuery()];\n          } else {\n            // No default listener here, flatten any deeper queries into an array\n            let queries: Query[] = [];\n            if (maybeChildSyncPoint) {\n              queries = queries.concat(\n                maybeChildSyncPoint.getQueryViews().map(view => view.getQuery())\n              );\n            }\n            each(childMap, (_key: string, childQueries: Query[]) => {\n              queries = queries.concat(childQueries);\n            });\n            return queries;\n          }\n        }\n      );\n      for (let i = 0; i < queriesToStop.length; ++i) {\n        const queryToStop = queriesToStop[i];\n        this.listenProvider_.stopListening(\n          SyncTree.queryForListening_(queryToStop),\n          this.tagForQuery_(queryToStop)\n        );\n      }\n    }\n    return events;\n  }\n\n  private createListenerForView_(\n    view: View\n  ): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n    const query = view.getQuery();\n    const tag = this.tagForQuery_(query);\n\n    return {\n      hashFn: () => {\n        const cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\n        return cache.hash();\n      },\n      onComplete: (status: string): Event[] => {\n        if (status === 'ok') {\n          if (tag) {\n            return this.applyTaggedListenComplete(query.path, tag);\n          } else {\n            return this.applyListenComplete(query.path);\n          }\n        } else {\n          // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n          // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n          const error = errorForServerCode(status, query);\n          return this.removeEventRegistration(\n            query,\n            /*eventRegistration*/ null,\n            error\n          );\n        }\n      }\n    };\n  }\n\n  /**\n   * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n   */\n  private static makeQueryKey_(query: Query): string {\n    return query.path.toString() + '$' + query.queryIdentifier();\n  }\n\n  /**\n   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n   */\n  private static parseQueryKey_(\n    queryKey: string\n  ): { queryId: string; path: Path } {\n    const splitIndex = queryKey.indexOf('$');\n    assert(\n      splitIndex !== -1 && splitIndex < queryKey.length - 1,\n      'Bad queryKey.'\n    );\n    return {\n      queryId: queryKey.substr(splitIndex + 1),\n      path: new Path(queryKey.substr(0, splitIndex))\n    };\n  }\n\n  /**\n   * Return the query associated with the given tag, if we have one\n   */\n  private queryKeyForTag_(tag: number): string | null {\n    return this.tagToQueryMap.get(tag);\n  }\n\n  /**\n   * Return the tag associated with the given query.\n   */\n  private tagForQuery_(query: Query): number | null {\n    const queryKey = SyncTree.makeQueryKey_(query);\n    return this.queryToTagMap.get(queryKey);\n  }\n\n  /**\n   * Static tracker for next query tag.\n   */\n  private static nextQueryTag_ = 1;\n\n  /**\n   * Static accessor for query tags.\n   */\n  private static getNextQueryTag_(): number {\n    return SyncTree.nextQueryTag_++;\n  }\n\n  /**\n   * A helper method to apply tagged operations\n   */\n  private applyTaggedOperation_(\n    queryPath: Path,\n    operation: Operation\n  ): Event[] {\n    const syncPoint = this.syncPointTree_.get(queryPath);\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    const writesCache = this.pendingWriteTree_.childWrites(queryPath);\n    return syncPoint.applyOperation(\n      operation,\n      writesCache,\n      /*serverCache=*/ null\n    );\n  }\n\n  /**\n   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n   *\n   * NOTES:\n   * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n   *\n   * - We call applyOperation() on each SyncPoint passing three things:\n   *   1. A version of the Operation that has been made relative to the SyncPoint location.\n   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n   *   3. A snapshot Node with cached server data, if we have it.\n   *\n   * - We concatenate all of the events returned by each SyncPoint and return the result.\n   */\n  private applyOperationToSyncPoints_(operation: Operation): Event[] {\n    return this.applyOperationHelper_(\n      operation,\n      this.syncPointTree_,\n      /*serverCache=*/ null,\n      this.pendingWriteTree_.childWrites(Path.Empty)\n    );\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   */\n  private applyOperationHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    if (operation.path.isEmpty()) {\n      return this.applyOperationDescendantsHelper_(\n        operation,\n        syncPointTree,\n        serverCache,\n        writesCache\n      );\n    } else {\n      const syncPoint = syncPointTree.get(Path.Empty);\n\n      // If we don't have cached server data, see if we can get it from this SyncPoint.\n      if (serverCache == null && syncPoint != null) {\n        serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n      }\n\n      let events: Event[] = [];\n      const childName = operation.path.getFront();\n      const childOperation = operation.operationForChild(childName);\n      const childTree = syncPointTree.children.get(childName);\n      if (childTree && childOperation) {\n        const childServerCache = serverCache\n          ? serverCache.getImmediateChild(childName)\n          : null;\n        const childWritesCache = writesCache.child(childName);\n        events = events.concat(\n          this.applyOperationHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n\n      if (syncPoint) {\n        events = events.concat(\n          syncPoint.applyOperation(operation, writesCache, serverCache)\n        );\n      }\n\n      return events;\n    }\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   */\n  private applyOperationDescendantsHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    const syncPoint = syncPointTree.get(Path.Empty);\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let events: Event[] = [];\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writesCache.child(childName);\n      const childOperation = operation.operationForChild(childName);\n      if (childOperation) {\n        events = events.concat(\n          this.applyOperationDescendantsHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n    });\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPoint.applyOperation(operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Path } from './util/Path';\nimport { Node } from './snap/Node';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n *\n * @constructor\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n *\n * @constructor\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsCollection } from './StatsCollection';\nimport { RepoInfo } from '../RepoInfo';\n\nexport class StatsManager {\n  private static collections_: { [k: string]: StatsCollection } = {};\n  private static reporters_: { [k: string]: unknown } = {};\n\n  static getCollection(repoInfo: RepoInfo): StatsCollection {\n    const hashString = repoInfo.toString();\n\n    if (!this.collections_[hashString]) {\n      this.collections_[hashString] = new StatsCollection();\n    }\n\n    return this.collections_[hashString];\n  }\n\n  static getOrCreateReporter<T>(\n    repoInfo: RepoInfo,\n    creatorFunction: () => T\n  ): T {\n    const hashString = repoInfo.toString();\n\n    if (!this.reporters_[hashString]) {\n      this.reporters_[hashString] = creatorFunction();\n    }\n\n    return this.reporters_[hashString] as T;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsCollection } from './StatsCollection';\nimport { each } from '../util/util';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ The collection to \"listen\" to.\n * @constructor\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\nimport { setTimeoutNonBlocking, each } from '../util/util';\nimport { StatsListener } from './StatsListener';\nimport { StatsCollection } from './StatsCollection';\nimport { ServerActions } from '../ServerActions';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\n/**\n * @constructor\n */\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  private statsToReport_: { [k: string]: boolean } = {};\n\n  /**\n   * @param collection\n   * @param server_\n   */\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  includeStat(stat: string) {\n    this.statsToReport_[stat] = true;\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { log, logger, exceptionGuard } from '../util/util';\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n * @constructor\n */\nexport class EventQueue {\n  /**\n   * @private\n   * @type {!Array.<EventList>}\n   */\n  private eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   * @private\n   * @type {!number}\n   */\n  private recursionDepth_ = 0;\n\n  /**\n   * @param {!Array.<Event>} eventDataList The new events to queue.\n   */\n  queueEvents(eventDataList: Event[]) {\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n    let currList = null;\n    for (let i = 0; i < eventDataList.length; i++) {\n      const eventData = eventDataList[i];\n      const eventPath = eventData.getPath();\n      if (currList !== null && !eventPath.equals(currList.getPath())) {\n        this.eventLists_.push(currList);\n        currList = null;\n      }\n\n      if (currList === null) {\n        currList = new EventList(eventPath);\n      }\n\n      currList.add(eventData);\n    }\n    if (currList) {\n      this.eventLists_.push(currList);\n    }\n  }\n\n  /**\n   * Queues the specified events and synchronously raises all events (including previously queued ones)\n   * for the specified path.\n   *\n   * It is assumed that the new events are all for the specified path.\n   *\n   * @param {!Path} path The path to raise events for.\n   * @param {!Array.<Event>} eventDataList The new events to raise.\n   */\n  raiseEventsAtPath(path: Path, eventDataList: Event[]) {\n    this.queueEvents(eventDataList);\n    this.raiseQueuedEventsMatchingPredicate_((eventPath: Path) =>\n      eventPath.equals(path)\n    );\n  }\n\n  /**\n   * Queues the specified events and synchronously raises all events (including previously queued ones) for\n   * locations related to the specified change path (i.e. all ancestors and descendants).\n   *\n   * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n   *\n   * @param {!Path} changedPath The path to raise events for.\n   * @param {!Array.<!Event>} eventDataList The events to raise\n   */\n  raiseEventsForChangedPath(changedPath: Path, eventDataList: Event[]) {\n    this.queueEvents(eventDataList);\n\n    this.raiseQueuedEventsMatchingPredicate_((eventPath: Path) => {\n      return eventPath.contains(changedPath) || changedPath.contains(eventPath);\n    });\n  }\n\n  /**\n   * @param {!function(!Path):boolean} predicate\n   * @private\n   */\n  private raiseQueuedEventsMatchingPredicate_(\n    predicate: (path: Path) => boolean\n  ) {\n    this.recursionDepth_++;\n\n    let sentAll = true;\n    for (let i = 0; i < this.eventLists_.length; i++) {\n      const eventList = this.eventLists_[i];\n      if (eventList) {\n        const eventPath = eventList.getPath();\n        if (predicate(eventPath)) {\n          this.eventLists_[i].raise();\n          this.eventLists_[i] = null;\n        } else {\n          sentAll = false;\n        }\n      }\n    }\n\n    if (sentAll) {\n      this.eventLists_ = [];\n    }\n\n    this.recursionDepth_--;\n  }\n}\n\n/**\n * @param {!Path} path\n * @constructor\n */\nexport class EventList {\n  /**\n   * @type {!Array.<Event>}\n   * @private\n   */\n  private events_: Event[] = [];\n\n  constructor(private readonly path_: Path) {}\n\n  /**\n   * @param {!Event} eventData\n   */\n  add(eventData: Event) {\n    this.events_.push(eventData);\n  }\n\n  /**\n   * Iterates through the list and raises each event\n   */\n  raise() {\n    for (let i = 0; i < this.events_.length; i++) {\n      const eventData = this.events_[i];\n      if (eventData !== null) {\n        this.events_[i] = null;\n        const eventFn = eventData.getEventRunner();\n        if (logger) {\n          log('event: ' + eventData.toString());\n        }\n        exceptionGuard(eventFn);\n      }\n    }\n  }\n\n  /**\n   * @return {!Path}\n   */\n  getPath(): Path {\n    return this.path_;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  /**\n   * @param {!Array.<string>} allowedEvents_\n   */\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @param {!string} eventType\n   * @return {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   * @param {!string} eventType\n   * @param {...*} varArgs\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from './EventEmitter';\nimport { assert } from '@firebase/util';\n\ndeclare const document: Document;\n\n/**\n * @extends {EventEmitter}\n */\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n *\n * @extends {EventEmitter}\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  /**\n   * @return {boolean}\n   */\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n * @constructor\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   * @param {number} requestNum\n   * @param {Array} data\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport {\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { base64Encode, stringify, isNodeSdk } from '@firebase/util';\n\nimport { Transport } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n * @const\n * @type {number}\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n * @const\n * @type {number}\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n *\n * @constructor\n * @implements {Transport}\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param transportSessionId Optional transportSessionid if we are reconnecting for an existing\n   *                                         transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has already created a\n   *                                     connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) =>\n      repoInfo.connectionURL(LONG_POLLING, params);\n  }\n\n  /**\n   *\n   * @param {function(Object)} onMessage Callback when messages arrive\n   * @param {function()} onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[\n          FIREBASE_LONGPOLL_CALLBACK_ID_PARAM\n        ] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.href &&\n        location.href.indexOf(FORGE_DOMAIN) !== -1\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  private static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  private static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   * @private\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   * @private\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param {!Object} data The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   * @param {!string} id\n   * @param {!string} pw\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   * @param {*} args\n   * @private\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n * @constructor\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[\n        FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier\n      ] = onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   * @private\n   * @return {Element}\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param {!string} id - The ID of this connection\n   * @param {!string} pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param {!string} url - The URL of the script tag.\n   * @param {!number} serial - The serial number of the request.\n   * @private\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param {!string} url - The URL for the script tag source.\n   * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const rstate = (newScript as any).readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript.onload = (newScript as any).onreadystatechange = null;\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n              loadCB();\n            }\n          };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n// SDK_VERSION should be set before any database instance is created\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport {\n  assert,\n  CONSTANTS as ENV_CONSTANTS,\n  jsonEval,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport {\n  FORGE_DOMAIN,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Transport } from './Transport';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { SDK_VERSION } from '../core/version';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n * @constructor\n * @implements {Transport}\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId Optional lastSessionId if there was a previous connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\n   * @return {string} connection url\n   * @private\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.href &&\n      location.href.indexOf(FORGE_DOMAIN) !== -1\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    return repoInfo.connectionURL(WEBSOCKET, urlParams);\n  }\n\n  /**\n   *\n   * @param onMessage Callback when messages arrive\n   * @param onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        const options: { [k: string]: object } = {\n          headers: {\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   * @type {number}\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   * @type {number}\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   * @return {boolean}\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param {number} frameCount The number of frames we are expecting from the server\n   * @private\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @param {!String} data\n   * @return {?String} Any remaining data to be process, or null if there is none\n   * @private\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param {Object} data The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param {string} str String to send.\n   * @private\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { WebSocketConnection } from './WebSocketConnection';\nimport { warn } from '../core/util/util';\nimport { TransportConstructor } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n * @constructor\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  /**\n   * @const\n   * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\n   */\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo\n   * @private\n   */\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n    }\n  }\n\n  /**\n   * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\n   * initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\n   * transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { PROTOCOL_VERSION } from './Constants';\nimport { TransportManager } from './TransportManager';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Transport, TransportConstructor } from './Transport';\nimport { Indexable } from '../core/util/misc';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n *\n * @constructor\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   * @private\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      undefined,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  /**\n   * @return {!string}\n   * @private\n   */\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   *\n   * @param {Object} dataMsg An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {Object} handshake The handshake data returned from the server\n   * @private\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.updateHost(host);\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.updateHost(host);\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   *\n   * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   * @private\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  /**\n   *\n   * @param {string} reason\n   * @private\n   */\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   *\n   * @private\n   */\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../api/Query';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  /**\n   * @param {!Query} query\n   * @param {function():string} currentHashFn\n   * @param {?number} tag\n   * @param {function(string, *)} onComplete\n   */\n  abstract listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   *\n   * @param {!Query} query\n   * @param {?number} tag\n   */\n  abstract unlisten(query: Query, tag: number | null): void;\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   * @param {string=} hash\n   */\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, ?string)} onComplete\n   * @param {string=} hash\n   */\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param {string} token The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {Object.<string, *>} stats\n   */\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  isEmpty,\n  safeGet,\n  CONSTANTS,\n  stringify,\n  assert,\n  isAdmin,\n  isValidFormat,\n  isMobileCordova,\n  isReactNative,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { Path } from './util/Path';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { OnlineMonitor } from './util/OnlineMonitor';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { ServerActions } from './ServerActions';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { Query } from '../api/Query';\nimport { SDK_VERSION } from './version';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_AUTH_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: Query;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  /** Map<path, Map<queryId, ListenSpec>> */\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingPutCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @implements {ServerActions}\n   * @param repoInfo_ Data about the namespace we are connecting to\n   * @param applicationId_ The Firebase App ID for this project\n   * @param onDataUpdate_ A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n    this.scheduleConnect_(0);\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const queryId = query.queryIdentifier();\n    const pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      'listen() called twice for same path/queryId.'\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query.queryObject();\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: Query) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query.getQueryParams().getIndex().toString() + '\"';\n        const indexPath = query.path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: Query, tag: number | null) {\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const self = this;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      // First fetch auth token, and establish connection after fetching the token was successful\n      this.authTokenProvider_\n        .getToken(forceRefresh)\n        .then(result => {\n          if (!canceled) {\n            log('getToken() completed. Creating connection.');\n            self.authToken_ = result && result.accessToken;\n            connection = new Connection(\n              connId,\n              self.repoInfo_,\n              self.applicationId_,\n              onDataMessage,\n              onReady,\n              onDisconnect,\n              /* onKill= */ reason => {\n                warn(reason + ' (' + self.repoInfo_.toString() + ')');\n                self.interrupt(SERVER_KILL_INTERRUPT_REASON);\n              },\n              lastSessionId\n            );\n          } else {\n            log('getToken() completed but was canceled');\n          }\n        })\n        .then(null, error => {\n          self.log_('Failed to get token: ' + error);\n          if (!canceled) {\n            if (this.repoInfo_.nodeAdmin) {\n              // This may be a critical error for the Admin Node.js SDK, so log a warning.\n              // But getToken() may also just have temporarily failed, so we still want to\n              // continue retrying.\n              warn(error);\n            }\n            closeFn();\n          }\n        });\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, jsonEval, safeGet, querystring } from '@firebase/util';\nimport { logWrapper, warn } from './util/util';\n\nimport { ServerActions } from './ServerActions';\nimport { RepoInfo } from './RepoInfo';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { Query } from '../api/Query';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   *\n   * @private {!Object.<string, !Object>}\n   */\n  private listens_: { [k: string]: object } = {};\n\n  /**\n   * @param {!Query} query\n   * @param {?number=} tag\n   * @return {string}\n   * @private\n   */\n  static getListenId_(query: Query, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query.getQueryParams().isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query.path.toString();\n    }\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\n   * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\n   * @param {AuthTokenProvider} authTokenProvider_\n   * @implements {ServerActions}\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query.path.toString();\n    this.log_(\n      'Listen called for ' + pathString + ' ' + query.queryIdentifier()\n    );\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = query\n      .getQueryParams()\n      .toRestQueryStringParameters();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: Query, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   *\n   * @param {!string} pathString\n   * @param {!Object.<string, *>} queryStringParameters\n   * @param {?function(?number, *=)} callback\n   * @private\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    this.authTokenProvider_\n      .getToken(/*forceRefresh=*/ false)\n      .then(authTokenData => {\n        const authToken = authTokenData && authTokenData.accessToken;\n        if (authToken) {\n          queryStringParameters['auth'] = authToken;\n        }\n\n        const url =\n          (this.repoInfo_.secure ? 'https://' : 'http://') +\n          this.repoInfo_.host +\n          pathString +\n          '?' +\n          'ns=' +\n          this.repoInfo_.namespace +\n          querystring(queryStringParameters);\n\n        this.log_('Sending REST request for ' + url);\n        const xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = () => {\n          if (callback && xhr.readyState === 4) {\n            this.log_(\n              'REST Response for ' + url + ' received. status:',\n              xhr.status,\n              'response:',\n              xhr.responseText\n            );\n            let res = null;\n            if (xhr.status >= 200 && xhr.status < 300) {\n              try {\n                res = jsonEval(xhr.responseText);\n              } catch (e) {\n                warn(\n                  'Failed to parse JSON response for ' +\n                    url +\n                    ': ' +\n                    xhr.responseText\n                );\n              }\n              callback(null, res);\n            } else {\n              // 401 and 404 are expected.\n              if (xhr.status !== 401 && xhr.status !== 404) {\n                warn(\n                  'Got unsuccessful REST response for ' +\n                    url +\n                    ' Status: ' +\n                    xhr.status\n                );\n              }\n              callback(xhr.status);\n            }\n            callback = null;\n          }\n        };\n\n        xhr.open('GET', url, /*asynchronous=*/ true);\n        xhr.send();\n      });\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { Path } from './util/Path';\nimport { SparseSnapshotTree } from './SparseSnapshotTree';\nimport { SyncTree } from './SyncTree';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport { stringify, map, isEmpty } from '@firebase/util';\nimport { beingCrawled, each, exceptionGuard, warn, log } from './util/util';\n\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { StatsManager } from './stats/StatsManager';\nimport { StatsReporter } from './stats/StatsReporter';\nimport { StatsListener } from './stats/StatsListener';\nimport { EventQueue } from './view/EventQueue';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { RepoInfo } from './RepoInfo';\nimport { Database } from '../api/Database';\nimport { ServerActions } from './ServerActions';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { Event } from './view/Event';\nimport { Node } from './snap/Node';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport { Indexable } from './util/misc';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  dataUpdateCount = 0;\n  private infoSyncTree_: SyncTree;\n  private serverSyncTree_: SyncTree;\n\n  private stats_: StatsCollection;\n  private statsListener_: StatsListener | null = null;\n  private eventQueue_ = new EventQueue();\n  private nextWriteId_ = 1;\n  private server_: ServerActions;\n  private statsReporter_: StatsReporter;\n  private transactionsInit_: () => void;\n  private infoData_: SnapshotHolder;\n  private abortTransactions_: (path: Path) => Path;\n  private rerunTransactions_: (changedPath: Path) => Path;\n  private interceptServerDataCallback_:\n    | ((a: string, b: unknown) => void)\n    | null = null;\n  private __database: Database;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  private onDisconnect_ = new SparseSnapshotTree();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    forceRestClient: boolean,\n    public app: FirebaseApp,\n    authTokenProvider: AuthTokenProvider\n  ) {\n    this.stats_ = StatsManager.getCollection(repoInfo_);\n\n    if (forceRestClient || beingCrawled()) {\n      this.server_ = new ReadonlyRestClient(\n        this.repoInfo_,\n        this.onDataUpdate_.bind(this),\n        authTokenProvider\n      );\n\n      // Minor hack: Fire onConnect immediately, since there's no actual connection.\n      setTimeout(this.onConnectStatus_.bind(this, true), 0);\n    } else {\n      const authOverride = app.options['databaseAuthVariableOverride'];\n      // Validate authOverride\n      if (typeof authOverride !== 'undefined' && authOverride !== null) {\n        if (typeof authOverride !== 'object') {\n          throw new Error(\n            'Only objects are supported for option databaseAuthVariableOverride'\n          );\n        }\n        try {\n          stringify(authOverride);\n        } catch (e) {\n          throw new Error('Invalid authOverride provided: ' + e);\n        }\n      }\n\n      this.persistentConnection_ = new PersistentConnection(\n        this.repoInfo_,\n        app.options.appId,\n        this.onDataUpdate_.bind(this),\n        this.onConnectStatus_.bind(this),\n        this.onServerInfoUpdate_.bind(this),\n        authTokenProvider,\n        authOverride\n      );\n\n      this.server_ = this.persistentConnection_;\n    }\n\n    authTokenProvider.addTokenChangeListener(token => {\n      this.server_.refreshAuthToken(token);\n    });\n\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n    this.statsReporter_ = StatsManager.getOrCreateReporter(\n      repoInfo_,\n      () => new StatsReporter(this.stats_, this.server_)\n    );\n\n    this.transactionsInit_();\n\n    // Used for .info.\n    this.infoData_ = new SnapshotHolder();\n    this.infoSyncTree_ = new SyncTree({\n      startListening: (query, tag, currentHashFn, onComplete) => {\n        let infoEvents: Event[] = [];\n        const node = this.infoData_.getNode(query.path);\n        // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n        // on initial data...\n        if (!node.isEmpty()) {\n          infoEvents = this.infoSyncTree_.applyServerOverwrite(\n            query.path,\n            node\n          );\n          setTimeout(() => {\n            onComplete('ok');\n          }, 0);\n        }\n        return infoEvents;\n      },\n      stopListening: () => {}\n    });\n    this.updateInfo_('connected', false);\n\n    this.serverSyncTree_ = new SyncTree({\n      startListening: (query, tag, currentHashFn, onComplete) => {\n        this.server_.listen(query, currentHashFn, tag, (status, data) => {\n          const events = onComplete(status, data);\n          this.eventQueue_.raiseEventsForChangedPath(query.path, events);\n        });\n        // No synchronous events for network-backed sync trees\n        return [];\n      },\n      stopListening: (query, tag) => {\n        this.server_.unlisten(query, tag);\n      }\n    });\n  }\n\n  /**\n   * @return The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n\n  /**\n   * @return The namespace represented by the repo.\n   */\n  name(): string {\n    return this.repoInfo_.namespace;\n  }\n\n  /**\n   * @return The time in milliseconds, taking the server offset into account if we have one.\n   */\n  serverTime(): number {\n    const offsetNode = this.infoData_.getNode(\n      new Path('.info/serverTimeOffset')\n    );\n    const offset = (offsetNode.val() as number) || 0;\n    return new Date().getTime() + offset;\n  }\n\n  /**\n   * Generate ServerValues using some variables from the repo object.\n   */\n  generateServerValues(): Indexable {\n    return generateWithValues({\n      timestamp: this.serverTime()\n    });\n  }\n\n  /**\n   * Called by realtime when we get new messages from the server.\n   */\n  private onDataUpdate_(\n    pathString: string,\n    data: unknown,\n    isMerge: boolean,\n    tag: number | null\n  ) {\n    // For testing.\n    this.dataUpdateCount++;\n    const path = new Path(pathString);\n    data = this.interceptServerDataCallback_\n      ? this.interceptServerDataCallback_(pathString, data)\n      : data;\n    let events = [];\n    if (tag) {\n      if (isMerge) {\n        const taggedChildren = map(\n          data as { [k: string]: unknown },\n          (raw: unknown) => nodeFromJSON(raw)\n        );\n        events = this.serverSyncTree_.applyTaggedQueryMerge(\n          path,\n          taggedChildren,\n          tag\n        );\n      } else {\n        const taggedSnap = nodeFromJSON(data);\n        events = this.serverSyncTree_.applyTaggedQueryOverwrite(\n          path,\n          taggedSnap,\n          tag\n        );\n      }\n    } else if (isMerge) {\n      const changedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\n    } else {\n      const snap = nodeFromJSON(data);\n      events = this.serverSyncTree_.applyServerOverwrite(path, snap);\n    }\n    let affectedPath = path;\n    if (events.length > 0) {\n      // Since we have a listener outstanding for each transaction, receiving any events\n      // is a proxy for some change having occurred.\n      affectedPath = this.rerunTransactions_(path);\n    }\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\n  }\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  interceptServerData_(callback: ((a: string, b: unknown) => unknown) | null) {\n    this.interceptServerDataCallback_ = callback;\n  }\n\n  private onConnectStatus_(connectStatus: boolean) {\n    this.updateInfo_('connected', connectStatus);\n    if (connectStatus === false) {\n      this.runOnDisconnectEvents_();\n    }\n  }\n\n  private onServerInfoUpdate_(updates: object) {\n    each(updates, (key: string, value: unknown) => {\n      this.updateInfo_(key, value);\n    });\n  }\n\n  private updateInfo_(pathString: string, value: unknown) {\n    const path = new Path('/.info/' + pathString);\n    const newNode = nodeFromJSON(value);\n    this.infoData_.updateSnapshot(path, newNode);\n    const events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n  }\n\n  private getNextWriteId_(): number {\n    return this.nextWriteId_++;\n  }\n\n  setWithPriority(\n    path: Path,\n    newVal: unknown,\n    newPriority: number | string | null,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.log_('set', {\n      path: path.toString(),\n      value: newVal,\n      priority: newPriority\n    });\n\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n    // (b) store unresolved paths on JSON parse\n    const serverValues = this.generateServerValues();\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n    const existing = this.serverSyncTree_.calcCompleteEventCache(path);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      existing,\n      serverValues\n    );\n\n    const writeId = this.getNextWriteId_();\n    const events = this.serverSyncTree_.applyUserOverwrite(\n      path,\n      newNode,\n      writeId,\n      true\n    );\n    this.eventQueue_.queueEvents(events);\n    this.server_.put(\n      path.toString(),\n      newNodeUnresolved.val(/*export=*/ true),\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('set at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = this.serverSyncTree_.ackUserWrite(\n          writeId,\n          !success\n        );\n        this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n    const affectedPath = this.abortTransactions_(path);\n    this.rerunTransactions_(affectedPath);\n    // We queued the events above, so just flush the queue here\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\n  }\n\n  update(\n    path: Path,\n    childrenToMerge: { [k: string]: unknown },\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.log_('update', { path: path.toString(), value: childrenToMerge });\n\n    // Start with our existing data and merge each child into it.\n    let empty = true;\n    const serverValues = this.generateServerValues();\n    const changedChildren: { [k: string]: Node } = {};\n    each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n      empty = false;\n      changedChildren[changedKey] = resolveDeferredValueTree(\n        path.child(changedKey),\n        nodeFromJSON(changedValue),\n        this.serverSyncTree_,\n        serverValues\n      );\n    });\n\n    if (!empty) {\n      const writeId = this.getNextWriteId_();\n      const events = this.serverSyncTree_.applyUserMerge(\n        path,\n        changedChildren,\n        writeId\n      );\n      this.eventQueue_.queueEvents(events);\n      this.server_.merge(\n        path.toString(),\n        childrenToMerge,\n        (status, errorReason) => {\n          const success = status === 'ok';\n          if (!success) {\n            warn('update at ' + path + ' failed: ' + status);\n          }\n\n          const clearEvents = this.serverSyncTree_.ackUserWrite(\n            writeId,\n            !success\n          );\n          const affectedPath =\n            clearEvents.length > 0 ? this.rerunTransactions_(path) : path;\n          this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\n          this.callOnCompleteCallback(onComplete, status, errorReason);\n        }\n      );\n\n      each(childrenToMerge, (changedPath: string) => {\n        const affectedPath = this.abortTransactions_(path.child(changedPath));\n        this.rerunTransactions_(affectedPath);\n      });\n\n      // We queued the events above, so just flush the queue here\n      this.eventQueue_.raiseEventsForChangedPath(path, []);\n    } else {\n      log(\"update() called with empty data.  Don't do anything.\");\n      this.callOnCompleteCallback(onComplete, 'ok');\n    }\n  }\n\n  /**\n   * Applies all of the changes stored up in the onDisconnect_ tree.\n   */\n  private runOnDisconnectEvents_() {\n    this.log_('onDisconnectEvents');\n\n    const serverValues = this.generateServerValues();\n    const resolvedOnDisconnectTree = new SparseSnapshotTree();\n    this.onDisconnect_.forEachTree(Path.Empty, (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        this.serverSyncTree_,\n        serverValues\n      );\n      resolvedOnDisconnectTree.remember(path, resolved);\n    });\n    let events: Event[] = [];\n\n    resolvedOnDisconnectTree.forEachTree(Path.Empty, (path, snap) => {\n      events = events.concat(\n        this.serverSyncTree_.applyServerOverwrite(path, snap)\n      );\n      const affectedPath = this.abortTransactions_(path);\n      this.rerunTransactions_(affectedPath);\n    });\n\n    this.onDisconnect_ = new SparseSnapshotTree();\n    this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\n  }\n\n  onDisconnectCancel(\n    path: Path,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n      if (status === 'ok') {\n        this.onDisconnect_.forget(path);\n      }\n      this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  }\n\n  onDisconnectSet(\n    path: Path,\n    value: unknown,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    const newNode = nodeFromJSON(value);\n    this.server_.onDisconnectPut(\n      path.toString(),\n      newNode.val(/*export=*/ true),\n      (status, errorReason) => {\n        if (status === 'ok') {\n          this.onDisconnect_.remember(path, newNode);\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  onDisconnectSetWithPriority(\n    path: Path,\n    value: unknown,\n    priority: unknown,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    const newNode = nodeFromJSON(value, priority);\n    this.server_.onDisconnectPut(\n      path.toString(),\n      newNode.val(/*export=*/ true),\n      (status, errorReason) => {\n        if (status === 'ok') {\n          this.onDisconnect_.remember(path, newNode);\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  onDisconnectUpdate(\n    path: Path,\n    childrenToMerge: { [k: string]: unknown },\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    if (isEmpty(childrenToMerge)) {\n      log(\n        \"onDisconnect().update() called with empty data.  Don't do anything.\"\n      );\n      this.callOnCompleteCallback(onComplete, 'ok');\n      return;\n    }\n\n    this.server_.onDisconnectMerge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        if (status === 'ok') {\n          each(childrenToMerge, (childName: string, childNode: unknown) => {\n            const newChildNode = nodeFromJSON(childNode);\n            this.onDisconnect_.remember(path.child(childName), newChildNode);\n          });\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  addEventCallbackForQuery(query: Query, eventRegistration: EventRegistration) {\n    let events;\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.addEventRegistration(\n        query,\n        eventRegistration\n      );\n    } else {\n      events = this.serverSyncTree_.addEventRegistration(\n        query,\n        eventRegistration\n      );\n    }\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  }\n\n  removeEventCallbackForQuery(\n    query: Query,\n    eventRegistration: EventRegistration\n  ) {\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n    // a little bit by handling the return values anyways.\n    let events;\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.removeEventRegistration(\n        query,\n        eventRegistration\n      );\n    } else {\n      events = this.serverSyncTree_.removeEventRegistration(\n        query,\n        eventRegistration\n      );\n    }\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  }\n\n  interrupt() {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.interrupt(INTERRUPT_REASON);\n    }\n  }\n\n  resume() {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.resume(INTERRUPT_REASON);\n    }\n  }\n\n  stats(showDelta: boolean = false) {\n    if (typeof console === 'undefined') {\n      return;\n    }\n\n    let stats: { [k: string]: unknown };\n    if (showDelta) {\n      if (!this.statsListener_) {\n        this.statsListener_ = new StatsListener(this.stats_);\n      }\n      stats = this.statsListener_.get();\n    } else {\n      stats = this.stats_.get();\n    }\n\n    const longestName = Object.keys(stats).reduce(\n      (previousValue, currentValue) =>\n        Math.max(currentValue.length, previousValue),\n      0\n    );\n\n    each(stats, (stat: string, value: unknown) => {\n      let paddedStat = stat;\n      // pad stat names to be the same length (plus 2 extra spaces).\n      for (let i = stat.length; i < longestName + 2; i++) {\n        paddedStat += ' ';\n      }\n      console.log(paddedStat + value);\n    });\n  }\n\n  statsIncrementCounter(metric: string) {\n    this.stats_.incrementCounter(metric);\n    this.statsReporter_.includeStat(metric);\n  }\n\n  private log_(...varArgs: unknown[]) {\n    let prefix = '';\n    if (this.persistentConnection_) {\n      prefix = this.persistentConnection_.id + ':';\n    }\n    log(prefix, ...varArgs);\n  }\n\n  callOnCompleteCallback(\n    callback: ((status: Error | null, errorReason?: string) => void) | null,\n    status: string,\n    errorReason?: string | null\n  ) {\n    if (callback) {\n      exceptionGuard(() => {\n        if (status === 'ok') {\n          callback(null);\n        } else {\n          const code = (status || 'error').toUpperCase();\n          let message = code;\n          if (errorReason) {\n            message += ': ' + errorReason;\n          }\n\n          const error = new Error(message);\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (error as any).code = code;\n          callback(error);\n        }\n      });\n    }\n  }\n\n  get database(): Database {\n    return this.__database || (this.__database = new Database(this));\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { NodeFilter } from './NodeFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n *\n * @constructor\n * @implements {NodeFilter}\n */\nexport class RangedFilter implements NodeFilter {\n  /**\n   * @type {!IndexedFilter}\n   * @const\n   * @private\n   */\n  private indexedFilter_: IndexedFilter;\n\n  /**\n   * @const\n   * @type {!Index}\n   * @private\n   */\n  private index_: Index;\n\n  /**\n   * @const\n   * @type {!NamedNode}\n   * @private\n   */\n  private startPost_: NamedNode;\n\n  /**\n   * @const\n   * @type {!NamedNode}\n   * @private\n   */\n  private endPost_: NamedNode;\n\n  /**\n   * @param {!QueryParams} params\n   */\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  /**\n   * @return {!NamedNode}\n   */\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  /**\n   * @return {!NamedNode}\n   */\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  /**\n   * @param {!NamedNode} node\n   * @return {boolean}\n   */\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @param {!QueryParams} params\n   * @return {!NamedNode}\n   * @private\n   */\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  /**\n   * @param {!QueryParams} params\n   * @return {!NamedNode}\n   * @private\n   */\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RangedFilter } from './RangedFilter';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Node, NamedNode } from '../../snap/Node';\nimport { assert } from '@firebase/util';\nimport { Change } from '../Change';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { IndexedFilter } from './IndexedFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n *\n * @constructor\n * @implements {NodeFilter}\n */\nexport class LimitedFilter implements NodeFilter {\n  /**\n   * @const\n   * @type {RangedFilter}\n   * @private\n   */\n  private readonly rangedFilter_: RangedFilter;\n\n  /**\n   * @const\n   * @type {!Index}\n   * @private\n   */\n  private readonly index_: Index;\n\n  /**\n   * @const\n   * @type {number}\n   * @private\n   */\n  private readonly limit_: number;\n\n  /**\n   * @const\n   * @type {boolean}\n   * @private\n   */\n  private readonly reverse_: boolean;\n\n  /**\n   * @param {!QueryParams} params\n   */\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @param {!Node} snap\n   * @param {string} childKey\n   * @param {!Node} childSnap\n   * @param {!CompleteChildSource} source\n   * @param {?ChildChangeAccumulator} changeAccumulator\n   * @return {!Node}\n   * @private\n   */\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childChangedChange(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childRemovedChange(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              Change.childAddedChange(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childRemovedChange(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            Change.childAddedChange(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\nimport { MIN_NAME, MAX_NAME } from '../util/util';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { RangedFilter } from './filter/RangedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { Index } from '../snap/indexes/Index';\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n * @constructor\n */\nexport class QueryParams {\n  private limitSet_ = false;\n  private startSet_ = false;\n  private startNameSet_ = false;\n  private endSet_ = false;\n  private endNameSet_ = false;\n\n  private limit_ = 0;\n  private viewFrom_ = '';\n  private indexStartValue_: unknown | null = null;\n  private indexStartName_ = '';\n  private indexEndValue_: unknown | null = null;\n  private indexEndName_ = '';\n\n  private index_ = PRIORITY_INDEX;\n\n  /**\n   * Wire Protocol Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly WIRE_PROTOCOL_CONSTANTS_ = {\n    INDEX_START_VALUE: 'sp',\n    INDEX_START_NAME: 'sn',\n    INDEX_END_VALUE: 'ep',\n    INDEX_END_NAME: 'en',\n    LIMIT: 'l',\n    VIEW_FROM: 'vf',\n    VIEW_FROM_LEFT: 'l',\n    VIEW_FROM_RIGHT: 'r',\n    INDEX: 'i'\n  };\n\n  /**\n   * REST Query Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly REST_QUERY_CONSTANTS_ = {\n    ORDER_BY: 'orderBy',\n    PRIORITY_INDEX: '$priority',\n    VALUE_INDEX: '$value',\n    KEY_INDEX: '$key',\n    START_AT: 'startAt',\n    END_AT: 'endAt',\n    LIMIT_TO_FIRST: 'limitToFirst',\n    LIMIT_TO_LAST: 'limitToLast'\n  };\n\n  /**\n   * Default, empty query parameters\n   * @type {!QueryParams}\n   * @const\n   */\n  static readonly DEFAULT = new QueryParams();\n\n  /**\n   * @return {boolean}\n   */\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @return {boolean} True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return (\n        this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT\n      );\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   * @return {*}\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * @return {*}\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @return {boolean} True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   * @return {!number}\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  /**\n   * @return {!Index}\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @return {!QueryParams}\n   * @private\n   */\n  private copy_(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limit(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = '';\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToFirst(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToLast(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  startAt(indexValue: unknown, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.startSet_ = true;\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n    newParams.indexStartValue_ = indexValue;\n    if (key != null) {\n      newParams.startNameSet_ = true;\n      newParams.indexStartName_ = key;\n    } else {\n      newParams.startNameSet_ = false;\n      newParams.indexStartName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  endAt(indexValue: unknown, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.endSet_ = true;\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n    newParams.indexEndValue_ = indexValue;\n    if (key !== undefined) {\n      newParams.endNameSet_ = true;\n      newParams.indexEndName_ = key;\n    } else {\n      newParams.endNameSet_ = false;\n      newParams.indexEndName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {!Index} index\n   * @return {!QueryParams}\n   */\n  orderBy(index: Index): QueryParams {\n    const newParams = this.copy_();\n    newParams.index_ = index;\n    return newParams;\n  }\n\n  /**\n   * @return {!Object}\n   */\n  getQueryObject(): {} {\n    const WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\n    const obj: { [k: string]: unknown } = {};\n    if (this.startSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\n      if (this.startNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\n      }\n    }\n    if (this.endSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\n      if (this.endNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\n      }\n    }\n    if (this.limitSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\n      let viewFrom = this.viewFrom_;\n      if (viewFrom === '') {\n        if (this.isViewFromLeft()) {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n        } else {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n        }\n      }\n      obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n    }\n    // For now, priority index is the default, so we only specify if it's some other index\n    if (this.index_ !== PRIORITY_INDEX) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\n    }\n    return obj;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  /**\n   * @return {!NodeFilter}\n   */\n  getNodeFilter(): NodeFilter {\n    if (this.loadsAllData()) {\n      return new IndexedFilter(this.getIndex());\n    } else if (this.hasLimit()) {\n      return new LimitedFilter(this);\n    } else {\n      return new RangedFilter(this);\n    }\n  }\n\n  /**\n   * Returns a set of REST query string parameters representing this query.\n   *\n   * @return {!Object.<string,*>} query string parameters\n   */\n  toRestQueryStringParameters(): { [k: string]: string | number } {\n    const REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\n    const qs: { [k: string]: string | number } = {};\n\n    if (this.isDefault()) {\n      return qs;\n    }\n\n    let orderBy;\n    if (this.index_ === PRIORITY_INDEX) {\n      orderBy = REST_CONSTANTS.PRIORITY_INDEX;\n    } else if (this.index_ === VALUE_INDEX) {\n      orderBy = REST_CONSTANTS.VALUE_INDEX;\n    } else if (this.index_ === KEY_INDEX) {\n      orderBy = REST_CONSTANTS.KEY_INDEX;\n    } else {\n      assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\n      orderBy = this.index_.toString();\n    }\n    qs[REST_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n    if (this.startSet_) {\n      qs[REST_CONSTANTS.START_AT] = stringify(this.indexStartValue_);\n      if (this.startNameSet_) {\n        qs[REST_CONSTANTS.START_AT] += ',' + stringify(this.indexStartName_);\n      }\n    }\n\n    if (this.endSet_) {\n      qs[REST_CONSTANTS.END_AT] = stringify(this.indexEndValue_);\n      if (this.endNameSet_) {\n        qs[REST_CONSTANTS.END_AT] += ',' + stringify(this.indexEndName_);\n      }\n    }\n\n    if (this.limitSet_) {\n      if (this.isViewFromLeft()) {\n        qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\n      } else {\n        qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\n      }\n    }\n\n    return qs;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnDisconnect } from './onDisconnect';\nimport { TransactionResult } from './TransactionResult';\nimport { warn } from '../core/util/util';\nimport { nextPushId } from '../core/util/NextPushId';\nimport { Query } from './Query';\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport { QueryParams } from '../core/view/QueryParams';\nimport {\n  validateRootPathString,\n  validatePathString,\n  validateFirebaseMergeDataArg,\n  validateBoolean,\n  validatePriority,\n  validateFirebaseDataArg,\n  validateWritablePath\n} from '../core/util/validation';\nimport { validateArgCount, validateCallback, Deferred } from '@firebase/util';\n\nimport { SyncPoint } from '../core/SyncPoint';\nimport { Database } from './Database';\nimport { DataSnapshot } from './DataSnapshot';\nimport * as types from '@firebase/database-types';\n\nexport interface ReferenceConstructor {\n  new (repo: Repo, path: Path): Reference;\n}\n\nexport class Reference extends Query {\n  then: Promise<Reference>['then'];\n  catch: Promise<Reference>['catch'];\n\n  /**\n   * Call options:\n   *   new Reference(Repo, Path) or\n   *   new Reference(url: string, string|RepoManager)\n   *\n   * Externally - this is the firebase.database.Reference type.\n   *\n   * @param {!Repo} repo\n   * @param {(!Path)} path\n   * @extends {Query}\n   */\n  constructor(repo: Repo, path: Path) {\n    if (!(repo instanceof Repo)) {\n      throw new Error(\n        'new Reference() no longer supported - use app.database().'\n      );\n    }\n\n    // call Query's constructor, passing in the repo and path.\n    super(repo, path, QueryParams.DEFAULT, false);\n  }\n\n  /** @return {?string} */\n  getKey(): string | null {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n\n    if (this.path.isEmpty()) {\n      return null;\n    } else {\n      return this.path.getBack();\n    }\n  }\n\n  /**\n   * @param {!(string|Path)} pathString\n   * @return {!Reference}\n   */\n  child(pathString: string | Path): Reference {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    } else if (!(pathString instanceof Path)) {\n      if (this.path.getFront() === null) {\n        validateRootPathString('Reference.child', 1, pathString, false);\n      } else {\n        validatePathString('Reference.child', 1, pathString, false);\n      }\n    }\n\n    return new Reference(this.repo, this.path.child(pathString));\n  }\n\n  /** @return {?Reference} */\n  getParent(): Reference | null {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n\n    const parentPath = this.path.parent();\n    return parentPath === null ? null : new Reference(this.repo, parentPath);\n  }\n\n  /** @return {!Reference} */\n  getRoot(): Reference {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n\n    let ref: Reference = this;\n    while (ref.getParent() !== null) {\n      ref = ref.getParent();\n    }\n    return ref;\n  }\n\n  /** @return {!Database} */\n  databaseProp(): Database {\n    return this.repo.database;\n  }\n\n  /**\n   * @param {*} newVal\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  set(\n    newVal: unknown,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateWritablePath('Reference.set', this.path);\n    validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\n    validateCallback('Reference.set', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path,\n      newVal,\n      /*priority=*/ null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  update(\n    objectToMerge: object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n    validateWritablePath('Reference.update', this.path);\n\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to Firebase.update() is deprecated. ' +\n          'Use set() if you want to overwrite the existing data, or ' +\n          'an Object with integer keys if you really do want to ' +\n          'only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'Reference.update',\n      1,\n      objectToMerge,\n      this.path,\n      false\n    );\n    validateCallback('Reference.update', 2, onComplete, true);\n    const deferred = new Deferred();\n    this.repo.update(\n      this.path,\n      objectToMerge as { [k: string]: unknown },\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} newVal\n   * @param {string|number|null} newPriority\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  setWithPriority(\n    newVal: unknown,\n    newPriority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('Reference.setWithPriority', this.path);\n    validateFirebaseDataArg(\n      'Reference.setWithPriority',\n      1,\n      newVal,\n      this.path,\n      false\n    );\n    validatePriority('Reference.setWithPriority', 2, newPriority, false);\n    validateCallback('Reference.setWithPriority', 3, onComplete, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw (\n        'Reference.setWithPriority failed: ' +\n        this.getKey() +\n        ' is a read-only object.'\n      );\n    }\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path,\n      newVal,\n      newPriority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<unknown> {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateWritablePath('Reference.remove', this.path);\n    validateCallback('Reference.remove', 1, onComplete, true);\n\n    return this.set(null, onComplete);\n  }\n\n  /**\n   * @param {function(*):*} transactionUpdate\n   * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\n   * @param {boolean=} applyLocally\n   * @return {!Promise}\n   */\n  transaction(\n    transactionUpdate: (a: unknown) => unknown,\n    onComplete?: (a: Error | null, b: boolean, c: DataSnapshot | null) => void,\n    applyLocally?: boolean\n  ): Promise<TransactionResult> {\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateWritablePath('Reference.transaction', this.path);\n    validateCallback('Reference.transaction', 1, transactionUpdate, false);\n    validateCallback('Reference.transaction', 2, onComplete, true);\n    // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\n    // to expose it.\n    validateBoolean('Reference.transaction', 3, applyLocally, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw (\n        'Reference.transaction failed: ' +\n        this.getKey() +\n        ' is a read-only object.'\n      );\n    }\n\n    if (applyLocally === undefined) {\n      applyLocally = true;\n    }\n\n    const deferred = new Deferred<TransactionResult>();\n    if (typeof onComplete === 'function') {\n      deferred.promise.catch(() => {});\n    }\n\n    const promiseComplete = function (\n      error: Error,\n      committed: boolean,\n      snapshot: DataSnapshot\n    ) {\n      if (error) {\n        deferred.reject(error);\n      } else {\n        deferred.resolve(new TransactionResult(committed, snapshot));\n      }\n      if (typeof onComplete === 'function') {\n        onComplete(error, committed, snapshot);\n      }\n    };\n    this.repo.startTransaction(\n      this.path,\n      transactionUpdate,\n      promiseComplete,\n      applyLocally\n    );\n\n    return deferred.promise;\n  }\n\n  /**\n   * @param {string|number|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  setPriority(\n    priority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateWritablePath('Reference.setPriority', this.path);\n    validatePriority('Reference.setPriority', 1, priority, false);\n    validateCallback('Reference.setPriority', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path.child('.priority'),\n      priority,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*=} value\n   * @param {function(?Error)=} onComplete\n   * @return {!Reference}\n   */\n  push(value?: unknown, onComplete?: (a: Error | null) => void): Reference {\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateWritablePath('Reference.push', this.path);\n    validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\n    validateCallback('Reference.push', 2, onComplete, true);\n\n    const now = this.repo.serverTime();\n    const name = nextPushId(now);\n\n    // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\n    // We use child() to create handles to two different references. The first is turned into a\n    // ThennableReference below by adding then() and catch() methods and is used as the\n    // return value of push(). The second remains a regular Reference and is used as the fulfilled\n    // value of the first ThennableReference.\n    const thennablePushRef = this.child(name);\n    const pushRef = this.child(name);\n\n    let promise;\n    if (value != null) {\n      promise = thennablePushRef.set(value, onComplete).then(() => pushRef);\n    } else {\n      promise = Promise.resolve(pushRef);\n    }\n\n    thennablePushRef.then = promise.then.bind(promise);\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\n\n    if (typeof onComplete === 'function') {\n      promise.catch(() => {});\n    }\n\n    return thennablePushRef;\n  }\n\n  /**\n   * @return {!OnDisconnect}\n   */\n  onDisconnect(): OnDisconnect {\n    validateWritablePath('Reference.onDisconnect', this.path);\n    return new OnDisconnect(this.repo, this.path);\n  }\n\n  get database(): Database {\n    return this.databaseProp();\n  }\n\n  get key(): string | null {\n    return this.getKey();\n  }\n\n  get parent(): Reference | null {\n    return this.getParent();\n  }\n\n  get root(): Reference {\n    return this.getRoot();\n  }\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nQuery.__referenceConstructor = Reference;\nSyncPoint.__referenceConstructor = Reference;\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, safeGet } from '@firebase/util';\nimport { Path } from './Path';\n\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport class TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: { [name: string]: TreeNode<T> } = {};\n  childCount = 0;\n  value: T | null = null;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @template T\n   * @param {string=} name_ Optional name of the node.\n   * @param {Tree=} parent_ Optional parent node.\n   * @param {TreeNode=} node_ Optional node to wrap.\n   */\n  constructor(\n    private name_: string = '',\n    private parent_: Tree<T> | null = null,\n    private node_: TreeNode<T> = new TreeNode<T>()\n  ) {}\n\n  /**\n   * Returns a sub-Tree for the given path.\n   *\n   * @param {!(string|Path)} pathObj Path to look up.\n   * @return {!Tree.<T>} Tree for path.\n   */\n  subTree(pathObj: string | Path): Tree<T> {\n    // TODO: Require pathObj to be Path?\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n    let child = this as Tree<T>,\n      next = path.getFront();\n    while (next !== null) {\n      const childNode = safeGet(child.node_.children, next) || new TreeNode();\n      child = new Tree(next, child, childNode);\n      path = path.popFront();\n      next = path.getFront();\n    }\n\n    return child;\n  }\n\n  /**\n   * Returns the data associated with this tree node.\n   *\n   * @return {?T} The data or null if no data exists.\n   */\n  getValue(): T | null {\n    return this.node_.value;\n  }\n\n  /**\n   * Sets data to this tree node.\n   *\n   * @param {!T} value Value to set.\n   */\n  setValue(value: T) {\n    assert(typeof value !== 'undefined', 'Cannot set value to undefined');\n    this.node_.value = value;\n    this.updateParents_();\n  }\n\n  /**\n   * Clears the contents of the tree node (its value and all children).\n   */\n  clear() {\n    this.node_.value = null;\n    this.node_.children = {};\n    this.node_.childCount = 0;\n    this.updateParents_();\n  }\n\n  /**\n   * @return {boolean} Whether the tree has any children.\n   */\n  hasChildren(): boolean {\n    return this.node_.childCount > 0;\n  }\n\n  /**\n   * @return {boolean} Whether the tree is empty (no value or children).\n   */\n  isEmpty(): boolean {\n    return this.getValue() === null && !this.hasChildren();\n  }\n\n  /**\n   * Calls action for each child of this tree node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   */\n  forEachChild(action: (tree: Tree<T>) => void) {\n    each(this.node_.children, (child: string, childTree: TreeNode<T>) => {\n      action(new Tree<T>(child, this, childTree));\n    });\n  }\n\n  /**\n   * Does a depth-first traversal of this node's descendants, calling action for each one.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\n   *   false.\n   * @param {boolean=} childrenFirst Whether to call action on children before calling it on\n   *   parent.\n   */\n  forEachDescendant(\n    action: (tree: Tree<T>) => void,\n    includeSelf?: boolean,\n    childrenFirst?: boolean\n  ) {\n    if (includeSelf && !childrenFirst) {\n      action(this);\n    }\n\n    this.forEachChild(child => {\n      child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\n    });\n\n    if (includeSelf && childrenFirst) {\n      action(this);\n    }\n  }\n\n  /**\n   * Calls action on each ancestor node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called on each parent; return\n   *   true to abort.\n   * @param {boolean=} includeSelf Whether to call action on this node as well.\n   * @return {boolean} true if the action callback returned true.\n   */\n  forEachAncestor(\n    action: (tree: Tree<T>) => unknown,\n    includeSelf?: boolean\n  ): boolean {\n    let node = includeSelf ? this : this.parent();\n    while (node !== null) {\n      if (action(node)) {\n        return true;\n      }\n      node = node.parent();\n    }\n    return false;\n  }\n\n  /**\n   * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n   * is found, action is called on it and traversal does not continue inside the node.\n   * Action is *not* called on this node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   */\n  forEachImmediateDescendantWithValue(action: (tree: Tree<T>) => void) {\n    this.forEachChild(child => {\n      if (child.getValue() !== null) {\n        action(child);\n      } else {\n        child.forEachImmediateDescendantWithValue(action);\n      }\n    });\n  }\n\n  /**\n   * @return {!Path} The path of this tree node, as a Path.\n   */\n  path(): Path {\n    return new Path(\n      this.parent_ === null\n        ? this.name_\n        : this.parent_.path() + '/' + this.name_\n    );\n  }\n\n  /**\n   * @return {string} The name of the tree node.\n   */\n  name(): string {\n    return this.name_;\n  }\n\n  /**\n   * @return {?Tree} The parent tree node, or null if this is the root of the tree.\n   */\n  parent(): Tree<T> | null {\n    return this.parent_;\n  }\n\n  /**\n   * Adds or removes this child from its parent based on whether it's empty or not.\n   *\n   * @private\n   */\n  private updateParents_() {\n    if (this.parent_ !== null) {\n      this.parent_.updateChild_(this.name_, this);\n    }\n  }\n\n  /**\n   * Adds or removes the passed child to this tree node, depending on whether it's empty.\n   *\n   * @param {string} childName The name of the child to update.\n   * @param {!Tree.<T>} child The child to update.\n   * @private\n   */\n  private updateChild_(childName: string, child: Tree<T>) {\n    const childEmpty = child.isEmpty();\n    const childExists = contains(this.node_.children, childName);\n    if (childEmpty && childExists) {\n      delete this.node_.children[childName];\n      this.node_.childCount--;\n      this.updateParents_();\n    } else if (!childEmpty && !childExists) {\n      this.node_.children[childName] = child.node_;\n      this.node_.childCount++;\n      this.updateParents_();\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, safeGet } from '@firebase/util';\nimport { Reference } from '../api/Reference';\nimport { DataSnapshot } from '../api/DataSnapshot';\nimport { Path } from './util/Path';\nimport { Tree } from './util/Tree';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { LUIDGenerator, warn, exceptionGuard } from './util/util';\nimport { resolveDeferredValueSnapshot } from './util/ServerValues';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\n\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Repo } from './Repo';\nimport { Event } from './view/Event';\n\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\n// For now it's part of Repo, but in its own file.\n\n/**\n * @enum {number}\n */\nexport enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\n * @type {number}\n * @const\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo as any).MAX_TRANSACTION_RETRIES_ = 25;\n\n/**\n * @typedef {{\n *   path: !Path,\n *   update: function(*):*,\n *   onComplete: ?function(?Error, boolean, ?DataSnapshot),\n *   status: ?TransactionStatus,\n *   order: !number,\n *   applyLocally: boolean,\n *   retryCount: !number,\n *   unwatcher: function(),\n *   abortReason: ?string,\n *   currentWriteId: !number,\n *   currentInputSnapshot: ?Node,\n *   currentOutputSnapshotRaw: ?Node,\n *   currentOutputSnapshotResolved: ?Node\n * }}\n */\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (a: Error | null, b: boolean, c: DataSnapshot | null) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * Setup the transaction data structures\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).transactionsInit_ = function () {\n  /**\n   * Stores queues of outstanding transactions for Firebase locations.\n   *\n   * @type {!Tree.<Array.<!Transaction>>}\n   * @private\n   */\n  this.transactionQueueTree_ = new Tree<Transaction[]>();\n};\n\ndeclare module './Repo' {\n  interface Repo {\n    startTransaction(\n      path: Path,\n      transactionUpdate: (a: unknown) => void,\n      onComplete: ((a: Error, b: boolean, c: DataSnapshot) => void) | null,\n      applyLocally: boolean\n    ): void;\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\n *\n * @param {!Path} path Path at which to do transaction.\n * @param {function(*):*} transactionUpdate Update callback.\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\n */\nRepo.prototype.startTransaction = function (\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((a: Error, b: boolean, c: DataSnapshot) => void) | null,\n  applyLocally: boolean\n) {\n  this.log_('transaction on ' + path);\n\n  // Add a watch to make sure we get server updates.\n  const valueCallback = function () {};\n  const watchRef = new Reference(this, path);\n  watchRef.on('value', valueCallback);\n  const unwatcher = function () {\n    watchRef.off('value', valueCallback);\n  };\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n\n    // One of TransactionStatus enums.\n    status: null,\n\n    // Used when combining transactions at different locations to figure out which one goes first.\n    order: LUIDGenerator(),\n\n    // Whether to raise local events for this transaction.\n    applyLocally,\n\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n\n    // Stores why a transaction was aborted.\n    abortReason: null,\n\n    currentWriteId: null,\n\n    currentInputSnapshot: null,\n\n    currentOutputSnapshotRaw: null,\n\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = this.getLatestState_(path);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      // We just set the input snapshot, so this cast should be safe\n      const snapshot = new DataSnapshot(\n        transaction.currentInputSnapshot,\n        new Reference(this, transaction.path),\n        PRIORITY_INDEX\n      );\n      transaction.onComplete(null, false, snapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = this.transactionQueueTree_.subTree(path);\n    const nodeQueue = queueNode.getValue() || [];\n    nodeQueue.push(transaction);\n\n    queueNode.setValue(nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our transaction state, since the user could\n    // start new transactions from the event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        this.serverSyncTree_.calcCompleteEventCache(path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n    priorityForNode /** @type {null|number|string} */ = priorityForNode;\n\n    const serverValues = this.generateServerValues();\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = this.getNextWriteId_();\n\n    const events = this.serverSyncTree_.applyUserOverwrite(\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n\n    this.sendReadyTransactions_();\n  }\n};\n\n/**\n * @param {!Path} path\n * @param {Array.<number>=} excludeSets A specific set to exclude\n * @return {Node}\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).getLatestState_ = function (\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n};\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\n * complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively with a particular\n * transactionQueueTree node to recurse through the tree.\n *\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).sendReadyTransactions_ = function (\n  node: Tree<Transaction[]> = this.transactionQueueTree_\n) {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    this.pruneCompletedTransactionsBelowNode_(node);\n  }\n\n  if (node.getValue() !== null) {\n    const queue = this.buildTransactionQueue_(node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      this.sendTransactionQueue_(node.path(), queue);\n    }\n  } else if (node.hasChildren()) {\n    node.forEachChild(childNode => {\n      this.sendReadyTransactions_(childNode);\n    });\n  }\n};\n\n/**\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\n *\n * @param {!Path} path The location of the queue.\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).sendTransactionQueue_ = function (\n  path: Path,\n  queue: Transaction[]\n) {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = this.getLatestState_(path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = Path.relativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  this.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      this.log_('transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n        // the callback could trigger more transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this transaction is complete, it should be set\n            const node = queue[i].currentOutputSnapshotResolved as Node;\n            const ref = new Reference(this, queue[i].path);\n            const snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\n            callbacks.push(\n              queue[i].onComplete.bind(null, null, true, snapshot)\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        this.pruneCompletedTransactionsBelowNode_(\n          this.transactionQueueTree_.subTree(path)\n        );\n        // There may be pending transactions that we can now send.\n        this.sendReadyTransactions_();\n\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        this.rerunTransactions_(path);\n      }\n    },\n    latestHash\n  );\n};\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\n * be raised for.\n *\n * @param {!Path} changedPath The path in mergedData that changed.\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).rerunTransactions_ = function (\n  changedPath: Path\n): Path {\n  const rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\n  const path = rootMostTransactionNode.path();\n\n  const queue = this.buildTransactionQueue_(rootMostTransactionNode);\n  this.rerunTransactionQueue_(queue, path);\n\n  return path;\n};\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\n *\n * @param {Array.<Transaction>} queue The queue of transactions to run.\n * @param {!Path} path The path the queue is for.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).rerunTransactionQueue_ = function (\n  queue: Transaction[],\n  path: Path\n) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n  // the callback could trigger more transactions or sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = Path.relativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (transaction.retryCount >= (Repo as any).MAX_TRANSACTION_RETRIES_) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = this.getLatestState_(\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = this.generateServerValues();\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = this.getNextWriteId_();\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            this.serverSyncTree_.applyUserOverwrite(\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n          );\n        }\n      }\n    }\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\n      // So defer the unwatcher until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          const ref = new Reference(this, queue[i].path);\n          // We set this field immediately, so it's safe to cast to an actual snapshot\n          const lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\n          const snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\n          callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\n        } else {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  this.sendReadyTransactions_();\n};\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\n * the node for the given path if there are no pending transactions on any ancestor.\n *\n * @param {!Path} path The location to start at.\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).getAncestorTransactionNode_ = function (\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\n  let transactionNode = this.transactionQueueTree_;\n  front = path.getFront();\n  while (front !== null && transactionNode.getValue() === null) {\n    transactionNode = transactionNode.subTree(front);\n    path = path.popFront();\n    front = path.getFront();\n  }\n\n  return transactionNode;\n};\n\n/**\n * Builds the queue of all transactions at or below the specified transactionNode.\n *\n * @param {!Tree.<Array.<Transaction>>} transactionNode\n * @return {Array.<Transaction>} The generated queue.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).buildTransactionQueue_ = function (\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => {\n    return a.order - b.order;\n  });\n\n  return transactionQueue;\n};\n\n/**\n * @param {!Tree.<Array.<Transaction>>} node\n * @param {Array.<Transaction>} queue\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).aggregateTransactionQueuesForNode_ = function (\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n) {\n  const nodeQueue = node.getValue();\n  if (nodeQueue !== null) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  node.forEachChild(child => {\n    this.aggregateTransactionQueuesForNode_(child, queue);\n  });\n};\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n *\n * @param {!Tree.<Array.<!Transaction>>} node\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).pruneCompletedTransactionsBelowNode_ = function (\n  node: Tree<Transaction[]>\n) {\n  const queue = node.getValue();\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    node.setValue(queue.length > 0 ? queue : null);\n  }\n\n  node.forEachChild(childNode => {\n    this.pruneCompletedTransactionsBelowNode_(childNode);\n  });\n};\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\n * since we consider them incompatible with transactions.\n *\n * @param {!Path} path Path for which we want to abort related transactions.\n * @return {!Path}\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).abortTransactions_ = function (path: Path): Path {\n  const affectedPath = this.getAncestorTransactionNode_(path).path();\n\n  const transactionNode = this.transactionQueueTree_.subTree(path);\n\n  transactionNode.forEachAncestor((node: Tree<Transaction[]>) => {\n    this.abortTransactionsOnNode_(node);\n  });\n\n  this.abortTransactionsOnNode_(transactionNode);\n\n  transactionNode.forEachDescendant((node: Tree<Transaction[]>) => {\n    this.abortTransactionsOnNode_(node);\n  });\n\n  return affectedPath;\n};\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).abortTransactionsOnNode_ = function (\n  node: Tree<Transaction[]>\n) {\n  const queue = node.getValue();\n  if (queue !== null) {\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n    // the callback could trigger more transactions or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\n    // can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true)\n        );\n        if (queue[i].onComplete) {\n          const snapshot: DataSnapshot | null = null;\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, snapshot)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      node.setValue(null);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport { log, warn } from './util/util';\nimport { FirebaseApp } from '@firebase/app-types';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n  constructor(\n    private app_: FirebaseApp,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.get().then(auth => (this.auth_ = auth));\n    }\n  }\n\n  /**\n   * @param {boolean} forceRefresh\n   * @return {!Promise<FirebaseAuthTokenData>}\n   */\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return Promise.resolve(null);\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      setTimeout(() => listener(null), 0);\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.app_.name +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* Auth token provider that the Admin SDK uses to connect to the Emulator. */\nexport class EmulatorAdminTokenProvider implements AuthTokenProvider {\n  private static EMULATOR_AUTH_TOKEN = 'owner';\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(EmulatorAdminTokenProvider.EMULATOR_AUTH_TOKEN);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { safeGet, CONSTANTS } from '@firebase/util';\nimport { Repo } from './Repo';\nimport { fatal, log } from './util/util';\nimport { parseRepoInfo } from './util/libs/parser';\nimport { validateUrl } from './util/validation';\nimport './Repo_transaction';\nimport { Database } from '../api/Database';\nimport { RepoInfo } from './RepoInfo';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  AuthTokenProvider,\n  EmulatorAdminTokenProvider,\n  FirebaseAuthTokenProvider\n} from './AuthTokenProvider';\n\n/**\n * This variable is also defined in the firebase node.js admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\nlet _staticInstance: RepoManager;\n\n/**\n * Creates and caches Repo instances.\n */\nexport class RepoManager {\n  /**\n   * @private {!Object.<string, Object<string, !fb.core.Repo>>}\n   */\n  private repos_: {\n    [appName: string]: {\n      [dbUrl: string]: Repo;\n    };\n  } = {};\n\n  /**\n   * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n   * @private {boolean}\n   */\n  private useRestClient_: boolean = false;\n\n  static getInstance(): RepoManager {\n    if (!_staticInstance) {\n      _staticInstance = new RepoManager();\n    }\n    return _staticInstance;\n  }\n\n  // TODO(koss): Remove these functions unless used in tests?\n  interrupt() {\n    for (const appName of Object.keys(this.repos_)) {\n      for (const dbUrl of Object.keys(this.repos_[appName])) {\n        this.repos_[appName][dbUrl].interrupt();\n      }\n    }\n  }\n\n  resume() {\n    for (const appName of Object.keys(this.repos_)) {\n      for (const dbUrl of Object.keys(this.repos_[appName])) {\n        this.repos_[appName][dbUrl].resume();\n      }\n    }\n  }\n\n  /**\n   * This function should only ever be called to CREATE a new database instance.\n   *\n   * @param {!FirebaseApp} app\n   * @return {!Database}\n   */\n  databaseFromApp(\n    app: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    url?: string,\n    nodeAdmin?: boolean\n  ): Database {\n    let dbUrl: string | undefined = url || app.options.databaseURL;\n    if (dbUrl === undefined) {\n      if (!app.options.projectId) {\n        fatal(\n          \"Can't determine Firebase Database URL. Be sure to include \" +\n            ' a Project ID when calling firebase.initializeApp().'\n        );\n      }\n\n      log('Using default host for project ', app.options.projectId);\n      dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n    }\n\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    let repoInfo = parsedUrl.repoInfo;\n\n    let isEmulator: boolean;\n\n    let dbEmulatorHost: string | undefined = undefined;\n    if (typeof process !== 'undefined') {\n      dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n    }\n\n    if (dbEmulatorHost) {\n      isEmulator = true;\n      dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n      parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n      repoInfo = parsedUrl.repoInfo;\n    } else {\n      isEmulator = !parsedUrl.repoInfo.secure;\n    }\n\n    const authTokenProvider =\n      nodeAdmin && isEmulator\n        ? new EmulatorAdminTokenProvider()\n        : new FirebaseAuthTokenProvider(app, authProvider);\n\n    validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n    if (!parsedUrl.path.isEmpty()) {\n      fatal(\n        'Database URL must point to the root of a Firebase Database ' +\n          '(not including a child path).'\n      );\n    }\n\n    const repo = this.createRepo(repoInfo, app, authTokenProvider);\n\n    return repo.database;\n  }\n\n  /**\n   * Remove the repo and make sure it is disconnected.\n   *\n   * @param {!Repo} repo\n   */\n  deleteRepo(repo: Repo) {\n    const appRepos = safeGet(this.repos_, repo.app.name);\n    // This should never happen...\n    if (!appRepos || safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\n      fatal(\n        `Database ${repo.app.name}(${repo.repoInfo_}) has already been deleted.`\n      );\n    }\n    repo.interrupt();\n    delete appRepos[repo.repoInfo_.toURLString()];\n  }\n\n  /**\n   * Ensures a repo doesn't already exist and then creates one using the\n   * provided app.\n   *\n   * @param {!RepoInfo} repoInfo The metadata about the Repo\n   * @param {!FirebaseApp} app\n   * @return {!Repo} The Repo object for the specified server / repoName.\n   */\n  createRepo(\n    repoInfo: RepoInfo,\n    app: FirebaseApp,\n    authTokenProvider: AuthTokenProvider\n  ): Repo {\n    let appRepos = safeGet(this.repos_, app.name);\n\n    if (!appRepos) {\n      appRepos = {};\n      this.repos_[app.name] = appRepos;\n    }\n\n    let repo = safeGet(appRepos, repoInfo.toURLString());\n    if (repo) {\n      fatal(\n        'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n      );\n    }\n    repo = new Repo(repoInfo, this.useRestClient_, app, authTokenProvider);\n    appRepos[repoInfo.toURLString()] = repo;\n\n    return repo;\n  }\n\n  /**\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n   * @param {boolean} forceRestClient\n   */\n  forceRestClient(forceRestClient: boolean) {\n    this.useRestClient_ = forceRestClient;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fatal } from '../core/util/util';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { Path } from '../core/util/Path';\nimport { Reference } from './Reference';\nimport { Repo } from '../core/Repo';\nimport { RepoManager } from '../core/RepoManager';\nimport { validateArgCount } from '@firebase/util';\nimport { validateUrl } from '../core/util/validation';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { FirebaseDatabase } from '@firebase/database-types';\n\n/**\n * Class representing a firebase database.\n * @implements {FirebaseService}\n */\nexport class Database implements FirebaseService {\n  INTERNAL: DatabaseInternals;\n  private root_: Reference;\n\n  static readonly ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    },\n    increment: (delta: number) => {\n      return {\n        '.sv': {\n          'increment': delta\n        }\n      };\n    }\n  };\n\n  /**\n   * The constructor should not be called by users of our public API.\n   * @param {!Repo} repo_\n   */\n  constructor(private repo_: Repo) {\n    if (!(repo_ instanceof Repo)) {\n      fatal(\n        \"Don't call new Database() directly - please use firebase.database().\"\n      );\n    }\n\n    /** @type {Reference} */\n    this.root_ = new Reference(repo_, Path.Empty);\n\n    this.INTERNAL = new DatabaseInternals(this);\n  }\n\n  get app(): FirebaseApp {\n    return this.repo_.app;\n  }\n\n  /**\n   * Returns a reference to the root or to the path specified in the provided\n   * argument.\n   *\n   * @param {string|Reference=} path The relative string path or an existing\n   * Reference to a database location.\n   * @throws If a Reference is provided, throws if it does not belong to the\n   * same project.\n   * @return {!Reference} Firebase reference.\n   */\n  ref(path?: string): Reference;\n  ref(path?: Reference): Reference;\n  ref(path?: string | Reference): Reference {\n    this.checkDeleted_('ref');\n    validateArgCount('database.ref', 0, 1, arguments.length);\n\n    if (path instanceof Reference) {\n      return this.refFromURL(path.toString());\n    }\n\n    return path !== undefined ? this.root_.child(path) : this.root_;\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @param {string} url\n   * @return {!Reference} Firebase reference.\n   */\n  refFromURL(url: string): Reference {\n    /** @const {string} */\n    const apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const parsedURL = parseRepoInfo(url, this.repo_.repoInfo_.nodeAdmin);\n    validateUrl(apiName, 1, parsedURL);\n\n    const repoInfo = parsedURL.repoInfo;\n    if (repoInfo.host !== this.repo_.repoInfo_.host) {\n      fatal(\n        apiName +\n          ': Host name does not match the current database: ' +\n          '(found ' +\n          repoInfo.host +\n          ' but expected ' +\n          (this.repo_.repoInfo_ as RepoInfo).host +\n          ')'\n      );\n    }\n\n    return this.ref(parsedURL.path.toString());\n  }\n\n  /**\n   * @param {string} apiName\n   */\n  private checkDeleted_(apiName: string) {\n    if (this.repo_ === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n\n  // Make individual repo go offline.\n  goOffline() {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  }\n\n  goOnline() {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  }\n}\n\nexport class DatabaseInternals {\n  /** @param {!Database} database */\n  constructor(public database: Database) {}\n\n  /** @return {Promise<void>} */\n  async delete(): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.database as any).checkDeleted_('delete');\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    RepoManager.getInstance().deleteRepo((this.database as any).repo_ as Repo);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.database as any).repo_ = null;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.database as any).root_ = null;\n    this.database.INTERNAL = null;\n    this.database = null;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { Reference } from './Reference';\n\n/**\n * INTERNAL methods for internal-use only (tests, etc.).\n *\n * Customers shouldn't use these or else should be aware that they could break at any time.\n *\n * @const\n */\n\nexport const forceLongPolling = function () {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\n\nexport const forceWebSockets = function () {\n  BrowserPollConnection.forceDisallow();\n};\n\n/* Used by App Manager */\nexport const isWebSocketsAvailable = function (): boolean {\n  return WebSocketConnection['isAvailable']();\n};\n\nexport const setSecurityDebugCallback = function (\n  ref: Reference,\n  callback: (a: object) => void\n) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (ref.repo.persistentConnection_ as any).securityDebugCallback_ = callback;\n};\n\nexport const stats = function (ref: Reference, showDelta?: boolean) {\n  ref.repo.stats(showDelta);\n};\n\nexport const statsIncrementCounter = function (ref: Reference, metric: string) {\n  ref.repo.statsIncrementCounter(metric);\n};\n\nexport const dataUpdateCount = function (ref: Reference): number {\n  return ref.repo.dataUpdateCount;\n};\n\nexport const interceptServerData = function (\n  ref: Reference,\n  callback: ((a: string, b: unknown) => void) | null\n) {\n  return ref.repo.interceptServerData_(callback);\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoManager } from '../core/RepoManager';\nimport { Connection } from '../realtime/Connection';\nimport { Query } from './Query';\n\nexport const DataConnection = PersistentConnection;\n\n/**\n * @param {!string} pathString\n * @param {function(*)} onComplete\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n/**\n * @param {*} data\n * @param {function(*)} onEcho\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @param {function(): string} newHash\n * @return {function()}\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\n/**\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\n */\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * @param {!Query} query\n * @return {!string}\n */\nexport const queryIdentifier = function (query: Query) {\n  return query.queryIdentifier();\n};\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n *\n * @param {boolean} forceRestClient\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  RepoManager.getInstance().forceRestClient(forceRestClient);\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase from '@firebase/app';\nimport { FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Database } from './src/api/Database';\nimport { DataSnapshot } from './src/api/DataSnapshot';\nimport { Query } from './src/api/Query';\nimport { Reference } from './src/api/Reference';\nimport { enableLogging } from './src/core/util/util';\nimport { RepoManager } from './src/core/RepoManager';\nimport * as INTERNAL from './src/api/internal';\nimport * as TEST_ACCESS from './src/api/test_access';\nimport { isNodeSdk } from '@firebase/util';\nimport * as types from '@firebase/database-types';\nimport { setSDKVersion } from './src/core/version';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from './package.json';\n\nconst ServerValue = Database.ServerValue;\n\nexport function registerDatabase(instance: FirebaseNamespace) {\n  // set SDK_VERSION\n  setSDKVersion(instance.SDK_VERSION);\n\n  // Register the Database Service with the 'firebase' namespace.\n  const namespace = (instance as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'database',\n      (container, url) => {\n        /* Dependencies */\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const authProvider = container.getProvider('auth-internal');\n\n        return RepoManager.getInstance().databaseFromApp(\n          app,\n          authProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    )\n      .setServiceProps(\n        // firebase.database namespace properties\n        {\n          Reference,\n          Query,\n          Database,\n          DataSnapshot,\n          enableLogging,\n          INTERNAL,\n          ServerValue,\n          TEST_ACCESS\n        }\n      )\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n\n  if (isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\nregisterDatabase(firebase);\n\n// Types to export for the admin SDK\nexport { Database, Query, Reference, enableLogging, ServerValue };\n\nexport { DataSnapshot } from './src/api/DataSnapshot';\nexport { OnDisconnect } from './src/api/onDisconnect';\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    database?: {\n      (app?: FirebaseApp): types.FirebaseDatabase;\n      enableLogging: typeof types.enableLogging;\n      ServerValue: types.ServerValue;\n      Database: typeof types.FirebaseDatabase;\n    };\n  }\n  interface FirebaseApp {\n    database?(databaseURL?: string): types.FirebaseDatabase;\n  }\n}\n"],
  "mappings": "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",
  "names": ["Deferred", "error", "FirebaseError", "ErrorFactory", "error", "key", "value", "Sha1", "ObserverProxy", "error", "error", "stringToByteArray", "Component", "name", "Provider", "ComponentContainer", "DOMStorageWrapper", "name", "MemoryStorage", "sha1", "error", "Path", "ValidationPath", "RepoInfo", "errorPrefixFxn", "errorPrefix", "OnDisconnect", "TransactionResult", "NamedNode", "Index", "KeyIndex", "LeafNode", "MAX_NODE", "setMaxNode", "PriorityIndex", "SortedMapIterator", "LLRBNode", "LLRBEmptyNode", "SortedMap", "Base12Num", "base12", "root", "chunkSize", "IndexMap", "ChildrenNode", "key", "MaxNode", "setPriorityMaxNode", "nodeFromJSON", "ValueIndex", "PathIndex", "DataSnapshot", "DataEvent", "CancelEvent", "ValueEventRegistration", "ChildEventRegistration", "Query", "ExistingValueProvider", "DeferredValueProvider", "SparseSnapshotTree", "OperationType", "OperationSource", "AckUserWrite", "ImmutableTree", "ListenComplete", "Overwrite", "Merge", "CacheNode", "ViewCache", "Change", "IndexedFilter", "ChildChangeAccumulator", "NoCompleteChildSource_", "WriteTreeCompleteChildSource", "ProcessorResult", "ViewProcessor", "EventGenerator", "View", "__referenceConstructor", "SyncPoint", "CompoundWrite", "WriteTree", "WriteTreeRef", "SyncTree", "query", "serverCache", "view", "SnapshotHolder", "StatsCollection", "StatsManager", "StatsListener", "StatsReporter", "stats", "EventQueue", "EventList", "EventEmitter", "VisibilityMonitor", "OnlineMonitor", "PacketReceiver", "i", "BrowserPollConnection", "FirebaseIFrameScriptHolder", "version", "WebSocketConnection", "TransportManager", "isWebSocketsAvailable", "Connection", "ServerActions", "PersistentConnection", "map", "ReadonlyRestClient", "Repo", "forceRestClient", "RangedFilter", "self", "LimitedFilter", "QueryParams", "Reference", "TreeNode", "Tree", "TransactionStatus", "txn", "FirebaseAuthTokenProvider", "EmulatorAdminTokenProvider", "RepoManager", "Database", "DatabaseInternals", "firebase"]
}
